using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
//using System.Runtime.InteropServices;
using System.Text;
using System.Linq;


/// <summary>
/// Facetracking manager is the component that manages the head and face tracking.
/// </summary>
public class FacetrackingWithUVs: MonoBehaviour 
{
	public Mesh pregenFace;

	public Texture2D[] faceImages;

	private int startNumber = 0;

	private double[] hardCodedUVs = { 0.725256,0.292094,0.731295,0.292606,0.728968,0.297833,0.716261,0.293304,0.721568,0.291549,0.711457,0.294206,0.737932,0.301450,0.731520,0.313310,0.748171,0.305910,0.725768,0.290095,0.730019,0.288795,0.740251,0.292267,0.721816,0.325335,0.740036,0.323121,0.714395,0.300142,0.721857,0.305556,0.711364,0.312385,0.721117,0.290574,0.722257,0.290717,0.706274,0.295623,0.702091,0.296551,0.721699,0.295072,0.407120,0.295122,0.414957,0.298454,0.409501,0.301813,0.417869,0.296226,0.431779,0.298308,0.427329,0.298750,0.402568,0.296187,0.401973,0.305674,0.394765,0.296411,0.391781,0.310206,0.404094,0.292734,0.392301,0.288802,0.400312,0.291715,0.383110,0.296543,0.379950,0.284377,0.413696,0.316711,0.427500,0.303527,0.451428,0.301215,0.444293,0.309811,0.439422,0.315636,0.409077,0.294275,0.422748,0.309073,0.442772,0.301428,0.416368,0.296655,0.417594,0.288264,0.428987,0.287972,0.417256,0.295051,0.430676,0.295904,0.415049,0.291301,0.429607,0.292412,0.409041,0.284544,0.415813,0.273982,0.425189,0.284909,0.400602,0.276419,0.387344,0.265138,0.399768,0.256995,0.372015,0.253945,0.357604,0.244859,0.372828,0.229724,0.358100,0.218808,0.341345,0.236637,0.321630,0.229733,0.341459,0.210444,0.301111,0.225238,0.323657,0.203932,0.281313,0.223478,0.306411,0.200875,0.254262,0.223599,0.280260,0.197670,0.225339,0.225364,0.255598,0.196883,0.202970,0.229891,0.186756,0.237714,0.220111,0.205419,0.195628,0.190604,0.717824,0.287074,0.718373,0.292084,0.710539,0.286400,0.712914,0.293234,0.719905,0.291312,0.715801,0.289959,0.721924,0.289200,0.718593,0.284158,0.725533,0.285056,0.723655,0.276949,0.731478,0.280075,0.732006,0.266490,0.740455,0.273311,0.743081,0.256329,0.751427,0.267001,0.751429,0.248613,0.763002,0.240651,0.778211,0.258035,0.780018,0.233305,0.796538,0.254194,0.793775,0.227819,0.811653,0.251275,0.804764,0.226649,0.825252,0.252698,0.822430,0.226547,0.844472,0.254872,0.838020,0.227359,0.861981,0.259245,0.844947,0.231905,0.871389,0.267161,0.844371,0.238895,0.870502,0.227430,0.898756,0.264988,0.757688,0.311632,0.747616,0.333514,0.766354,0.317361,0.762801,0.292873,0.781552,0.323812,0.768730,0.351484,0.801253,0.329368,0.786751,0.297324,0.749727,0.379975,0.786318,0.359699,0.741143,0.369855,0.755894,0.342605,0.771301,0.294149,0.747432,0.282100,0.759894,0.279359,0.735537,0.357363,0.769044,0.277739,0.728172,0.342045,0.751725,0.292302,0.737484,0.285817,0.378681,0.316103,0.368794,0.296870,0.364788,0.322012,0.354175,0.298100,0.334378,0.300914,0.346183,0.328466,0.324652,0.335466,0.363737,0.357038,0.329086,0.277245,0.310454,0.304831,0.377626,0.347606,0.391156,0.337923,0.404564,0.360536,0.364297,0.281118,0.395388,0.373930,0.348449,0.278495,0.407037,0.293215,0.404051,0.326887,0.427220,0.328196,0.416638,0.344879,0.826271,0.338566,0.808551,0.373091,0.776371,0.404438,0.761515,0.390246,0.806462,0.301343,0.785570,0.277100,0.938275,0.411633,0.915711,0.419958,0.918519,0.388979,0.928478,0.421539,0.895379,0.373695,0.928805,0.420782,0.874579,0.321995,0.920542,0.416147,0.919149,0.379049,0.906318,0.409503,0.884936,0.402069,0.887903,0.359507,0.900192,0.440734,0.908076,0.369531,0.874579,0.321995,0.895465,0.331410,0.933394,0.465331,0.915882,0.451017,0.923057,0.497708,0.871389,0.267161,0.874579,0.321995,0.906207,0.483022,0.940620,0.439775,0.926246,0.481826,0.924201,0.449957,0.928234,0.324222,0.929253,0.343218,0.933738,0.455730,0.919551,0.365494,0.934485,0.489625,0.936135,0.501055,0.925773,0.519850,0.073013,0.413501,0.098990,0.422278,0.092256,0.452451,0.112326,0.424134,0.107766,0.458517,0.133417,0.423782,0.114316,0.392810,0.131629,0.467617,0.159084,0.420261,0.167646,0.453755,0.193760,0.416148,0.099126,0.492666,0.119845,0.503249,0.159508,0.499637,0.145078,0.521939,0.188567,0.485479,0.205964,0.445696,0.103472,0.391000,0.115406,0.357654,0.121271,0.367401,0.134396,0.352826,0.131257,0.386699,0.157087,0.382295,0.188724,0.375391,0.064504,0.441771,0.085900,0.484487,0.078600,0.382782,0.092207,0.344339,0.268049,0.357621,0.259303,0.318011,0.286631,0.310665,0.298734,0.345300,0.323516,0.381768,0.247038,0.441505,0.233377,0.410611,0.290526,0.406215,0.360785,0.412272,0.224741,0.366944,0.345624,0.367161,0.384700,0.385398,0.348104,0.432771,0.347212,0.458925,0.295277,0.445567,0.225278,0.326597,0.284057,0.278706,0.258950,0.282585,0.306498,0.277255,0.392092,0.455689,0.392131,0.475139,0.397301,0.438703,0.225343,0.475676,0.308340,0.476043,0.264802,0.473795,0.158589,0.343743,0.188504,0.334771,0.405123,0.425830,0.828868,0.306475,0.846072,0.313602,0.851647,0.350237,0.839786,0.396943,0.871311,0.435378,0.787046,0.425696,0.831644,0.439579,0.825271,0.277952,0.839916,0.282418,0.804618,0.277200,0.785690,0.454661,0.817743,0.472556,0.853010,0.469743,0.884259,0.472233,0.859104,0.286958,0.742581,0.472981,0.775905,0.481541,0.744535,0.451749,0.741317,0.433225,0.051852,0.513501,0.057063,0.473075,0.580869,0.579379,0.605867,0.577174,0.603572,0.590508,0.625051,0.569056,0.621550,0.583839,0.638557,0.557403,0.632503,0.572998,0.652227,0.541825,0.647539,0.556712,0.667677,0.526366,0.664764,0.539759,0.685251,0.509454,0.681931,0.525839,0.708486,0.491213,0.704981,0.509875,0.737294,0.494910,0.654299,0.530642,0.669911,0.513596,0.686685,0.494569,0.709449,0.474085,0.687729,0.481720,0.700398,0.527325,0.728559,0.515021,0.680004,0.541518,0.661585,0.556752,0.643222,0.574314,0.657409,0.518820,0.672132,0.501421,0.554969,0.577653,0.556131,0.564500,0.532810,0.569662,0.582757,0.567660,0.609116,0.563905,0.557780,0.552840,0.534304,0.557106,0.553408,0.590813,0.533100,0.584099,0.584006,0.555624,0.578644,0.593927,0.597341,0.611372,0.627503,0.556354,0.610483,0.552228,0.613610,0.605223,0.572873,0.615065,0.549089,0.611664,0.641270,0.544978,0.630251,0.544020,0.626654,0.593725,0.644261,0.533404,0.862572,0.500999,0.800877,0.498687,0.835238,0.497418,0.707977,0.459604,0.764058,0.505023,0.514897,0.558185,0.516431,0.545954,0.496444,0.542821,0.498242,0.531995,0.477203,0.527719,0.478620,0.515321,0.455159,0.510579,0.455441,0.496293,0.427120,0.492195,0.428029,0.476569,0.354319,0.483707,0.457577,0.483937,0.432156,0.462919,0.452113,0.526499,0.393927,0.495954,0.428514,0.527267,0.427550,0.510194,0.398237,0.515626,0.535456,0.544808,0.516835,0.534377,0.497801,0.520130,0.479138,0.503272,0.516969,0.593350,0.516264,0.573283,0.493336,0.573959,0.495584,0.557056,0.473941,0.540475,0.471154,0.556862,0.450755,0.541788,0.532359,0.605267,0.247374,0.503667,0.361765,0.506278,0.321716,0.500860,0.282904,0.500105,0.944307,0.470807,0.946094,0.510539,0.927479,0.516899,0.934626,0.522709,0.934544,0.530903,0.926719,0.541624,0.900484,0.523279,0.885545,0.509728,0.905151,0.538901,0.094163,0.526133,0.113857,0.533757,0.139778,0.544450,0.177194,0.541800,0.215119,0.512328,0.190562,0.525806,0.080732,0.520179,0.883353,0.293493,0.731108,0.420885,0.289182,0.249882,0.265629,0.250726,0.350435,0.184721,0.334117,0.178905,0.365230,0.155908,0.378043,0.160779,0.400633,0.133150,0.414172,0.137674,0.451905,0.122958,0.441803,0.116833,0.482959,0.106488,0.491720,0.114932,0.528314,0.111705,0.523851,0.102663,0.556974,0.102225,0.560492,0.111025,0.588667,0.103003,0.591768,0.112027,0.625451,0.107261,0.663627,0.118510,0.662362,0.124686,0.701815,0.135926,0.729827,0.159071,0.725890,0.164626,0.757299,0.181577,0.748765,0.187309,0.781477,0.204344,0.772603,0.207146,0.559269,0.541716,0.536465,0.534280,0.612278,0.541241,0.330952,0.255729,0.309457,0.251935,0.380440,0.200938,0.365555,0.191577,0.391632,0.169691,0.405165,0.181484,0.423944,0.147864,0.435353,0.161375,0.470599,0.151129,0.505456,0.148137,0.461171,0.135404,0.537869,0.146999,0.499883,0.129856,0.532474,0.128099,0.562965,0.128050,0.564518,0.147385,0.591898,0.128436,0.590614,0.147516,0.622736,0.130600,0.620705,0.149271,0.657886,0.137169,0.651508,0.153441,0.689072,0.151716,0.716379,0.173833,0.706182,0.185656,0.739118,0.195094,0.727379,0.204611,0.760476,0.213900,0.747044,0.222933,0.724500,0.410516,0.699122,0.445899,0.692877,0.464468,0.704247,0.449789,0.688994,0.471904,0.673580,0.491587,0.678604,0.483284,0.660731,0.508187,0.665523,0.497745,0.652172,0.511200,0.647923,0.522642,0.631732,0.533539,0.638494,0.521094,0.618462,0.528397,0.585478,0.545427,0.587538,0.532969,0.560364,0.528950,0.537893,0.521825,0.517494,0.523622,0.518269,0.512082,0.499236,0.509412,0.479165,0.493220,0.480348,0.484769,0.459179,0.474232,0.459555,0.466274,0.438080,0.452857,0.446685,0.448783,0.412391,0.414461,0.373593,0.397057,0.407031,0.292988,0.409302,0.293505,0.409332,0.289162,0.448681,0.297330,0.468096,0.298796,0.465603,0.292347,0.471509,0.303708,0.515340,0.307794,0.492409,0.306112,0.488361,0.307859,0.489407,0.300386,0.511887,0.301565,0.511157,0.295925,0.464881,0.304707,0.487752,0.294861,0.582022,0.307477,0.560999,0.307441,0.556094,0.310267,0.557037,0.300929,0.577978,0.300722,0.574886,0.296338,0.536187,0.308184,0.533013,0.310669,0.532397,0.301677,0.555785,0.296205,0.531719,0.296449,0.512153,0.309958,0.445001,0.290230,0.691203,0.298650,0.677090,0.301894,0.670777,0.303452,0.674566,0.298161,0.689746,0.296125,0.686285,0.288808,0.638463,0.301851,0.657571,0.300346,0.650727,0.294506,0.661255,0.305115,0.643125,0.307321,0.632602,0.309653,0.670108,0.291386,0.650931,0.307205,0.597350,0.301046,0.593062,0.296241,0.601867,0.307377,0.574738,0.310120,0.620112,0.301857,0.614652,0.296570,0.624697,0.308024,0.593397,0.310230,0.614532,0.310643,0.632524,0.295945,0.703947,0.294523,0.701245,0.286389,0.688292,0.299638,0.498630,0.429388,0.480786,0.430240,0.477843,0.424850,0.498934,0.441722,0.483133,0.435043,0.525250,0.436586,0.518502,0.447159,0.508669,0.417432,0.534947,0.422378,0.548880,0.435693,0.546751,0.446330,0.497961,0.406152,0.487403,0.417892,0.533489,0.456178,0.539483,0.412905,0.490071,0.447304,0.473788,0.440020,0.467206,0.432895,0.463711,0.422864,0.457867,0.409721,0.554681,0.427739,0.562369,0.431673,0.507975,0.463759,0.510739,0.453667,0.563897,0.444474,0.559711,0.437319,0.484903,0.456439,0.560509,0.423912,0.524450,0.468994,0.556103,0.457725,0.631239,0.435170,0.646151,0.435955,0.664898,0.446405,0.649367,0.417028,0.665550,0.417247,0.665052,0.428769,0.675213,0.440921,0.630966,0.421871,0.620707,0.427442,0.675304,0.424266,0.681690,0.434335,0.621871,0.431101,0.646797,0.445937,0.283018,0.612678,0.285803,0.610122,0.285478,0.616057,0.292647,0.606123,0.289872,0.618172,0.302074,0.601866,0.279780,0.612188,0.283083,0.608918,0.282877,0.613983,0.278142,0.617712,0.282889,0.620810,0.296656,0.620622,0.290853,0.623678,0.263581,0.608911,0.290716,0.604498,0.299362,0.599201,0.275288,0.597502,0.278218,0.614889,0.263396,0.613780,0.826973,0.611365,0.826835,0.613027,0.825740,0.615383,0.831058,0.613644,0.825247,0.608756,0.828425,0.607048,0.831903,0.617076,0.830447,0.610572,0.842985,0.606629,0.843221,0.612197,0.821038,0.604939,0.843161,0.618971,0.829672,0.621406,0.842387,0.625116,0.823660,0.602721,0.812010,0.601345,0.815325,0.597646,0.839061,0.600710,0.827919,0.586939,0.833384,0.594816,0.824081,0.618230,0.860128,0.599536,0.861135,0.608808,0.856083,0.589846,0.862070,0.618323,0.803689,0.598651,0.807562,0.593419,0.792626,0.597568,0.795953,0.591071,0.779720,0.596942,0.782947,0.589333,0.762981,0.596789,0.766369,0.589002,0.746172,0.599308,0.749901,0.590479,0.729384,0.600523,0.732795,0.591309,0.713682,0.600759,0.714588,0.593180,0.699223,0.602802,0.699553,0.598739,0.685732,0.608066,0.685868,0.605417,0.679763,0.610633,0.677642,0.608848,0.683432,0.618675,0.694254,0.624411,0.693899,0.630351,0.818465,0.629647,0.808999,0.625088,0.819298,0.621759,0.825205,0.625288,0.782233,0.632183,0.772935,0.568619,0.791670,0.569680,0.678523,0.614572,0.682984,0.622937,0.819321,0.578972,0.806467,0.573350,0.753098,0.570147,0.732509,0.571989,0.712196,0.575859,0.694409,0.582398,0.667833,0.603064,0.679550,0.593935,0.677160,0.615809,0.669738,0.615934,0.724033,0.633569,0.800295,0.627622,0.767893,0.643688,0.746984,0.644405,0.742778,0.636364,0.762515,0.636225,0.788884,0.638773,0.726776,0.642239,0.808100,0.632828,0.709190,0.637809,0.709175,0.630361,0.312981,0.598630,0.307663,0.623538,0.325170,0.597498,0.318604,0.626014,0.340978,0.596674,0.338204,0.630326,0.359527,0.596463,0.359395,0.634053,0.376442,0.598621,0.380460,0.633689,0.392057,0.599723,0.398814,0.630960,0.405602,0.600101,0.412453,0.628224,0.418415,0.602222,0.425156,0.622642,0.429668,0.607503,0.433028,0.617203,0.434621,0.609903,0.435898,0.613358,0.427113,0.627691,0.299158,0.627376,0.338717,0.590782,0.327403,0.571500,0.348418,0.570293,0.282431,0.589455,0.435539,0.621103,0.439213,0.614785,0.447796,0.615163,0.440977,0.628287,0.295029,0.581155,0.310116,0.575334,0.323301,0.592358,0.310069,0.595047,0.369928,0.571536,0.374643,0.591708,0.357001,0.590342,0.390824,0.573335,0.391224,0.592433,0.409755,0.576847,0.426173,0.583280,0.420792,0.599441,0.431015,0.605646,0.438569,0.608407,0.439960,0.594442,0.378380,0.639398,0.355708,0.639505,0.331730,0.635522,0.398302,0.637518,0.310150,0.629958,0.413860,0.634290,0.407516,0.594258,0.428191,0.637750,0.447944,0.636557,0.431147,0.652185,0.464086,0.650898,0.438180,0.674931,0.458865,0.702236,0.437883,0.706237,0.490765,0.702745,0.464999,0.730276,0.522858,0.705692,0.512117,0.728487,0.571871,0.727879,0.571853,0.707686,0.618838,0.704279,0.646966,0.700250,0.669539,0.725507,0.674459,0.697695,0.691705,0.702026,0.661007,0.651592,0.687339,0.672765,0.671295,0.637133,0.690888,0.651918,0.679398,0.630105,0.693622,0.640157,0.107450,0.305243,0.133671,0.319379,0.131591,0.264461,0.160570,0.274093,0.163239,0.303239,0.181626,0.264851,0.892698,0.304299,0.923806,0.304720,0.892698,0.304299,0.872899,0.275206,0.838639,0.191800,0.137042,0.594294,0.145981,0.623596,0.120203,0.632224,0.169415,0.578938,0.169249,0.598728,0.110477,0.596517,0.103679,0.638641,0.093179,0.598113,0.086308,0.644052,0.076677,0.598663,0.077549,0.558177,0.091332,0.561292,0.109954,0.564330,0.136917,0.569411,0.171133,0.559859,0.177318,0.619369,0.202059,0.591990,0.234788,0.602585,0.236959,0.611315,0.204562,0.605961,0.048682,0.655899,0.048463,0.603430,0.048990,0.556709,0.058318,0.711751,0.131315,0.669609,0.147342,0.697588,0.133374,0.714020,0.157449,0.649130,0.115890,0.731758,0.098481,0.689706,0.082283,0.767131,0.141640,0.768694,0.157085,0.746404,0.115678,0.679540,0.174806,0.671863,0.168390,0.722229,0.186941,0.637434,0.209032,0.619604,0.240391,0.620418,0.244697,0.630270,0.265680,0.620130,0.268951,0.625646,0.327170,0.147683,0.346978,0.150788,0.311393,0.173515,0.282938,0.125981,0.300349,0.149393,0.257800,0.176285,0.236867,0.157283,0.311654,0.147550,0.273460,0.172462,0.235661,0.199890,0.290424,0.171532,0.355662,0.124945,0.369075,0.125984,0.385506,0.129689,0.419431,0.197023,0.394517,0.213071,0.432305,0.214185,0.405939,0.227737,0.444713,0.234856,0.456757,0.263675,0.431880,0.270593,0.465668,0.282198,0.444194,0.285560,0.468976,0.292385,0.448002,0.293445,0.332635,0.097608,0.347183,0.123759,0.533458,0.043656,0.528628,0.078986,0.481798,0.080956,0.481351,0.046288,0.435770,0.089565,0.431240,0.056623,0.389977,0.104024,0.383112,0.073611,0.398822,0.105860,0.446135,0.091803,0.535404,0.083373,0.490766,0.084955,0.161150,0.226447,0.185651,0.772623,0.174260,0.800757,0.150105,0.847431,0.112886,0.811163,0.479756,0.333679,0.487892,0.320705,0.508659,0.323997,0.526232,0.327405,0.515404,0.345010,0.499807,0.338904,0.459719,0.452395,0.459320,0.441286,0.471014,0.450396,0.452569,0.435923,0.460708,0.381023,0.494559,0.388298,0.191697,0.691976,0.216899,0.709131,0.198263,0.739042,0.249067,0.727666,0.286140,0.775127,0.239104,0.757228,0.288080,0.741922,0.330799,0.748097,0.371220,0.785702,0.328530,0.781994,0.383099,0.748695,0.425916,0.739973,0.420992,0.787512,0.471013,0.787003,0.517605,0.785150,0.506075,0.479179,0.521763,0.486927,0.518592,0.500125,0.499260,0.498928,0.517074,0.617492,0.479866,0.476819,0.464203,0.464927,0.468026,0.461512,0.482168,0.469868,0.451655,0.584298,0.436086,0.568973,0.444119,0.558449,0.454675,0.454495,0.493095,0.361925,0.517846,0.369803,0.525700,0.394436,0.468227,0.353408,0.422900,0.544551,0.205267,0.577172,0.238799,0.593091,0.267852,0.603349,0.338190,0.546606,0.329887,0.527250,0.313118,0.548057,0.297781,0.528627,0.268601,0.532644,0.243061,0.540623,0.223195,0.551280,0.473045,0.893865,0.475060,0.838845,0.521241,0.839049,0.518882,0.895632,0.568751,0.837891,0.465533,0.973750,0.415285,0.966517,0.255239,0.570028,0.245949,0.580607,0.211415,0.563293,0.207209,0.256972,0.237943,0.252695,0.229798,0.287344,0.349727,0.260538,0.365872,0.266570,0.290913,0.551515,0.194221,0.293064,0.459238,0.095808,0.500511,0.090877,0.573440,0.242454,0.552957,0.242651,0.545443,0.222284,0.528906,0.244160,0.520095,0.221351,0.505643,0.247416,0.496660,0.224266,0.481971,0.254556,0.468737,0.228265,0.393974,0.280856,0.382100,0.273522,0.565505,0.410957,0.556323,0.393894,0.581967,0.394238,0.432947,0.364075,0.445460,0.341585,0.413447,0.107644,0.429984,0.111457,0.473115,0.100154,0.514913,0.177694,0.486188,0.176638,0.516401,0.200172,0.491829,0.199656,0.535619,0.265483,0.512492,0.270955,0.535638,0.286950,0.514441,0.289069,0.512814,0.096034,0.543085,0.089182,0.550834,0.094740,0.564831,0.181044,0.542672,0.179919,0.565946,0.202585,0.541954,0.201706,0.568071,0.222902,0.579664,0.258348,0.559418,0.260104,0.578650,0.283998,0.559359,0.284710,0.460375,0.614113,0.485099,0.625637,0.251880,0.638901,0.273292,0.632035,0.257879,0.670073,0.278487,0.681679,0.258889,0.707161,0.230851,0.690327,0.228417,0.792547,0.216440,0.827163,0.193672,0.882343,0.412256,0.644145,0.393218,0.647443,0.372540,0.649394,0.344739,0.648603,0.315724,0.644397,0.281326,0.634842,0.569255,0.428872,0.582296,0.426215,0.584080,0.432490,0.593865,0.425442,0.467050,0.316290,0.460595,0.324664,0.449613,0.425310,0.418351,0.400732,0.448844,0.602955,0.465610,0.598109,0.396101,0.535422,0.415444,0.557821,0.392589,0.551815,0.489293,0.592705,0.275614,0.653163,0.563279,0.515569,0.539273,0.509454,0.500961,0.488818,0.427163,0.385468,0.564193,0.895293,0.568088,0.976835,0.570050,0.782279,0.333297,0.719544,0.290659,0.721547,0.205715,0.672384,0.196263,0.654948,0.544009,0.639781,0.271437,0.559188,0.375683,0.880745,0.365240,0.954342,0.308002,0.937215,0.424911,0.890230,0.427513,0.836519,0.379944,0.833261,0.324523,0.869843,0.333801,0.826726,0.270064,0.853012,0.282735,0.813964,0.450987,0.181113,0.363292,0.529928,0.366216,0.548365,0.463919,0.572409,0.583333,0.443775,0.578519,0.459014,0.601047,0.444028,0.386276,0.241547,0.463361,0.202577,0.517697,0.976716,0.330764,0.666212,0.311548,0.690221,0.363198,0.666998,0.353426,0.688798,0.297450,0.660431,0.391322,0.664538,0.388595,0.685988,0.553211,0.328393,0.573149,0.421103,0.292814,0.638592,0.415683,0.659675,0.376265,0.713808,0.413287,0.711310,0.538159,0.349574,0.586679,0.328497,0.587452,0.419350,0.597869,0.432439,0.415882,0.681872,0.569049,0.435045,0.573512,0.476656,0.601162,0.459535,0.540448,0.685424,0.238833,0.657034,0.546524,0.370856,0.585436,0.348259,0.594247,0.498982,0.568909,0.498500,0.571265,0.642719,0.261904,0.645087,0.502648,0.661611,0.526145,0.677195,0.532930,0.628960,0.543936,0.494523,0.548488,0.473981,0.582311,0.370715,0.224162,0.644073,0.216186,0.631695,0.407623,0.291133,0.402979,0.286416,0.490397,0.291443,0.490320,0.276042,0.929639,0.590298,0.938878,0.592126,0.932159,0.627437,0.905670,0.575151,0.928391,0.565685,0.941704,0.593696,0.935073,0.633471,0.941448,0.594095,0.937044,0.639040,0.938199,0.557416,0.938797,0.560723,0.905647,0.556660,0.905216,0.595030,0.917863,0.619531,0.881719,0.602675,0.882007,0.588130,0.968106,0.598437,0.972394,0.649973,0.932974,0.554267,0.953087,0.552800,0.976125,0.704505,0.935422,0.683653,0.924975,0.663904,0.931867,0.673903,0.922779,0.707840,0.930654,0.724976,0.956921,0.758942,0.939860,0.802528,0.907521,0.761505,0.916303,0.645172,0.918990,0.691719,0.908385,0.739882,0.898474,0.634517,0.903363,0.616198,0.881662,0.629281,0.881972,0.616685,0.862079,0.628908,0.907656,0.716260,0.895438,0.687678,0.910115,0.667853,0.745170,0.149301,0.779065,0.172202,0.769169,0.175453,0.739822,0.153269,0.759499,0.127437,0.800378,0.158436,0.779175,0.177250,0.813332,0.206698,0.740947,0.150918,0.782148,0.173068,0.815343,0.201196,0.809496,0.198437,0.745932,0.148773,0.705292,0.126354,0.707245,0.127237,0.704447,0.131841,0.698310,0.200508,0.718836,0.216837,0.714842,0.230892,0.690230,0.217030,0.708476,0.248297,0.686213,0.237248,0.704137,0.272219,0.685235,0.265779,0.693843,0.286852,0.689497,0.293067,0.675564,0.292769,0.715831,0.099513,0.698886,0.125564,0.583733,0.047003,0.574142,0.081616,0.630109,0.057934,0.616183,0.090729,0.670967,0.075458,0.657953,0.105663,0.662842,0.107142,0.579416,0.085475,0.619742,0.092667,0.884239,0.793506,0.916377,0.838684,0.679665,0.429630,0.684631,0.422221,0.684199,0.332429,0.667273,0.338264,0.658329,0.323381,0.641392,0.327066,0.697222,0.451192,0.694945,0.460473,0.694429,0.449408,0.696169,0.434743,0.695746,0.440379,0.690163,0.432213,0.691431,0.439254,0.689765,0.379986,0.686033,0.408874,0.657647,0.405748,0.884211,0.733223,0.873954,0.705082,0.853813,0.751608,0.850491,0.723184,0.819140,0.769450,0.821421,0.736563,0.784523,0.776214,0.786721,0.741914,0.748526,0.780073,0.746146,0.742101,0.711502,0.781943,0.710379,0.734494,0.667161,0.782536,0.622384,0.782588,0.630123,0.726337,0.673271,0.453070,0.659100,0.455692,0.676346,0.462941,0.664016,0.468312,0.672969,0.478204,0.662360,0.486237,0.670184,0.487675,0.658113,0.499321,0.621492,0.619812,0.609645,0.629748,0.684375,0.475554,0.694161,0.463349,0.687138,0.468747,0.669485,0.583864,0.661943,0.572605,0.679740,0.558272,0.667560,0.361265,0.645697,0.369508,0.651440,0.344633,0.662083,0.387628,0.627632,0.412574,0.636049,0.393913,0.880102,0.573802,0.688612,0.455385,0.781317,0.544871,0.803016,0.546016,0.789356,0.525609,0.817734,0.526376,0.841249,0.530220,0.859733,0.537979,0.651711,0.890678,0.608472,0.893948,0.614224,0.837245,0.694020,0.885688,0.710892,0.961935,0.655808,0.835215,0.870877,0.548568,0.878326,0.560157,0.851590,0.577624,0.846430,0.567329,0.762345,0.262085,0.822025,0.549332,0.666183,0.108182,0.624816,0.096254,0.584945,0.091588,0.589787,0.222921,0.593903,0.243204,0.613976,0.222524,0.618170,0.245052,0.637636,0.225402,0.641308,0.248960,0.664665,0.229960,0.664122,0.256473,0.723490,0.259062,0.712990,0.274948,0.604464,0.410768,0.585545,0.410148,0.607605,0.393727,0.714594,0.362324,0.690673,0.352259,0.714676,0.383785,0.627476,0.100956,0.665525,0.112735,0.626631,0.115670,0.614002,0.178728,0.614355,0.201286,0.639778,0.178518,0.637102,0.201278,0.622326,0.266162,0.619671,0.287329,0.643290,0.272131,0.639595,0.289784,0.588713,0.096391,0.587126,0.180499,0.589761,0.202035,0.599651,0.260595,0.597234,0.284759,0.657362,0.616313,0.857329,0.638042,0.840953,0.632437,0.854427,0.666722,0.874435,0.685743,0.849868,0.700755,0.855245,0.786331,0.853367,0.820318,0.886136,0.873861,0.731014,0.651971,0.752043,0.654620,0.803298,0.648356,0.777867,0.652981,0.823866,0.641254,0.832609,0.636623,0.630093,0.436905,0.623409,0.434767,0.616188,0.428648,0.611226,0.432391,0.633593,0.444163,0.685724,0.568508,0.689831,0.313829,0.699202,0.322455,0.704918,0.306625,0.707598,0.339756,0.720114,0.398214,0.694148,0.423718,0.674568,0.319449,0.726901,0.534786,0.701760,0.544191,0.729714,0.550806,0.706494,0.557033,0.653406,0.598310,0.639608,0.593866,0.837370,0.679162,0.819007,0.662339,0.839475,0.653583,0.590286,0.518109,0.620094,0.515165,0.642523,0.508838,0.616622,0.975165,0.750853,0.708334,0.789398,0.713671,0.826001,0.716984,0.894355,0.668184,0.896708,0.651704,0.597291,0.639577,0.835949,0.556865,0.735558,0.875371,0.776804,0.863927,0.800476,0.930121,0.698874,0.831603,0.740398,0.827641,0.817012,0.846472,0.778163,0.821105,0.683172,0.165614,0.795564,0.200540,0.757803,0.528742,0.684658,0.446415,0.642998,0.457356,0.623355,0.458768,0.731469,0.245038,0.739145,0.234156,0.662676,0.204732,0.885801,0.766053,0.815204,0.808165,0.666144,0.970645,0.755400,0.948444,0.845996,0.905558,0.787903,0.669004,0.759419,0.670297,0.806251,0.688123,0.769476,0.686776,0.733274,0.667110,0.708609,0.660751,0.711252,0.647301,0.735674,0.683841,0.617379,0.328332,0.601020,0.420976,0.709682,0.678548,0.615069,0.423586,0.630966,0.349357,0.618298,0.443541,0.719501,0.706236,0.623831,0.476367,0.598793,0.477814,0.570686,0.689122,0.602551,0.684434,0.870010,0.654074,0.615617,0.676767,0.646971,0.473446,0.619022,0.370727,0.849565,0.645131,0.636875,0.659827,0.641725,0.628592,0.619409,0.498136,0.878158,0.641695,0.643928,0.493896,0.696208,0.452704,0.704815,0.291646,0.659916,0.292011,0.754645,0.547066,0.706912,0.284992,0.680254,0.283664,0.661874,0.277398,0.697382,0.141030,0.409213,0.294684,0.933062,0.381287,0.419438,0.245896,0.250332,0.913454,0.604832,0.426075,0.671261,0.184370};
	private double[] oldUVs = {0.5312734, 0.5372864, 0.53074, 0.5364295, 0.5295261, 0.5342121, 0.5287713, 0.5310518, 0.5284727, 0.524019, 0.5284663, 0.5175132, 0.5283898, 0.5133483, 0.5278189, 0.5056328, 0.5273354, 0.5025526, 0.5274296, 0.4975964, 0.5274918, 0.4943651, 0.5280663, 0.4336175, 0.5271537, 0.4450911, 0.5266367, 0.4523334, 0.5269529, 0.4732057, 0.5271872, 0.4808314, 0.5282795, 0.4193071, 0.5257449, 0.4636398, 0.5259422, 0.4601101, 0.5269279, 0.4851674, 0.5263034, 0.4702387, 0.5257456, 0.466637, 0.5268189, 0.4889852, 0.5268071, 0.4714246, 0.5282085, 0.4282748, 0.5268621, 0.449465, 0.5263131, 0.4560249, 0.5282069, 0.4118148, 0.5285134, 0.3905563, 0.5296246, 0.3692865, 0.528905, 0.3794682, 0.5259906, 0.4688812, 0.5272272, 0.4762854, 0.5282328, 0.5094188, 0.5301358, 0.5352967, 0.5275985, 0.4376952, 0.5014601, 0.4605658, 0.5022485, 0.4768107, 0.5115159, 0.5179616, 0.514129, 0.5235096, 0.5145243, 0.5231018, 0.5119769, 0.5173814, 0.5157223, 0.5204723, 0.5146145, 0.5226488, 0.5088311, 0.5122248, 0.517292, 0.5164339, 0.5120518, 0.5121923, 0.5102326, 0.5134385, 0.5091558, 0.5112845, 0.5140813, 0.509175, 0.506395, 0.5028725, 0.5089881, 0.5036114, 0.5041583, 0.4989048, 0.5092995, 0.4800715, 0.5124365, 0.4843005, 0.5109821, 0.4947444, 0.5076569, 0.4929197, 0.5047339, 0.4979398, 0.5179226, 0.5135738, 0.511636, 0.5023492, 0.5185705, 0.5103913, 0.514712, 0.5070163, 0.5189919, 0.500976, 0.5153249, 0.5049233, 0.499281, 0.45517, 0.5025116, 0.4837179, 0.5168023, 0.499167, 0.5137587, 0.500652, 0.5128927, 0.5015876, 0.512202, 0.4953785, 0.5193955, 0.497526, 0.5153432, 0.4981515, 0.5128735, 0.4956364, 0.5158436, 0.4489287, 0.5157017, 0.4527465, 0.5197713, 0.4957725, 0.5172883, 0.497234, 0.5146562, 0.4957835, 0.5140962, 0.4878017, 0.5134466, 0.4860338, 0.5198531, 0.4947316, 0.5174578, 0.4959507, 0.515816, 0.4971967, 0.515358, 0.491728, 0.5150643, 0.4832084, 0.5193945, 0.4507177, 0.5189121, 0.4592369, 0.507257, 0.456007, 0.5053422, 0.448135, 0.517528, 0.4953958, 0.5161036, 0.4964006, 0.5153645, 0.4957299, 0.5156383, 0.4861788, 0.5179917, 0.466145, 0.5195854, 0.444452, 0.5195554, 0.4476899, 0.5156298, 0.4458286, 0.5162644, 0.4959952, 0.5158417, 0.4958369, 0.5161178, 0.4932396, 0.50833, 0.4459909, 0.5072331, 0.4445165, 0.5007901, 0.4322959, 0.516133, 0.4959471, 0.5167049, 0.4942959, 0.5161318, 0.4894168, 0.5242004, 0.4395879, 0.5234908, 0.4472723, 0.5213297, 0.4521067, 0.5210004, 0.4417054, 0.5210201, 0.44477, 0.5174693, 0.4446559, 0.5154204, 0.4417307, 0.5154083, 0.4379963, 0.5017219, 0.4444634, 0.5037511, 0.4411843, 0.5173446, 0.4951801, 0.5179183, 0.4900035, 0.5183935, 0.462779, 0.5248398, 0.4354655, 0.5261296, 0.4342987, 0.516124, 0.4298403, 0.5095732, 0.4413695, 0.5104142, 0.4379585, 0.5036265, 0.4328936, 0.501429, 0.4229668, 0.499423, 0.4494032, 0.499974, 0.4521193, 0.4992841, 0.4284998, 0.4991029, 0.4436342, 0.5186546, 0.4916831, 0.5212494, 0.4739604, 0.5182259, 0.4648338, 0.51833, 0.4633338, 0.5191739, 0.4604331, 0.5216894, 0.4367487, 0.5170286, 0.4410099, 0.5100907, 0.4308883, 0.5052011, 0.4326035, 0.5039417, 0.428065, 0.5024803, 0.4261059, 0.499468, 0.4280461, 0.4994369, 0.4295788, 0.5196555, 0.4940068, 0.5221746, 0.4809804, 0.5182192, 0.4683051, 0.5185963, 0.4674396, 0.5189518, 0.461745, 0.5212634, 0.4558745, 0.5225013, 0.4540558, 0.5250583, 0.4457122, 0.522778, 0.4376259, 0.5242246, 0.4326353, 0.5172971, 0.43048, 0.5004494, 0.4152216, 0.521707, 0.4857806, 0.5191247, 0.4707407, 0.5195214, 0.4693153, 0.5193638, 0.4684033, 0.518828, 0.4643257, 0.5191357, 0.4660645, 0.52303, 0.4248811, 0.52472, 0.4216352, 0.5026754, 0.4229238, 0.5045927, 0.4256833, 0.5224919, 0.4891891, 0.5242845, 0.4807804, 0.5254573, 0.4730607, 0.5198796, 0.4671389, 0.5207798, 0.4618598, 0.5221303, 0.4608903, 0.5224358, 0.4640054, 0.5211617, 0.4643056, 0.5242782, 0.4528627, 0.5066966, 0.4325034, 0.5055867, 0.4287986, 0.5026004, 0.4191547, 0.5016851, 0.4048697, 0.501605, 0.4090477, 0.5238016, 0.4928917, 0.5221292, 0.4662072, 0.5231722, 0.4665677, 0.52454, 0.4695894, 0.5257573, 0.4201708, 0.5226295, 0.4309116, 0.5180407, 0.4366046, 0.5184386, 0.4397697, 0.5184737, 0.4316498, 0.508585, 0.4319963, 0.5070068, 0.4258187, 0.5241608, 0.4940897, 0.5233284, 0.4848948, 0.5239616, 0.4603564, 0.5239897, 0.4637585, 0.5172832, 0.421166, 0.5165219, 0.4158017, 0.5205512, 0.4358107, 0.5197787, 0.4346799, 0.5082297, 0.43567, 0.5075405, 0.4291058, 0.5062107, 0.4166878, 0.5071872, 0.4208777, 0.5243913, 0.4889764, 0.5233678, 0.4708797, 0.5246257, 0.4705693, 0.5241821, 0.4698165, 0.5243813, 0.4667083, 0.5254366, 0.4701019, 0.5172585, 0.4103521, 0.5173584, 0.4246071, 0.5197122, 0.4335724, 0.5094011, 0.4313665, 0.5082344, 0.4282224, 0.5084795, 0.4098047, 0.5019591, 0.4004269, 0.5256065, 0.493047, 0.5257352, 0.4710925, 0.514044, 0.4153544, 0.5144346, 0.4088344, 0.5152309, 0.4201086, 0.5204076, 0.4333207, 0.50863, 0.4241535, 0.5081067, 0.4135827, 0.5096526, 0.4191872, 0.5112262, 0.4088167, 0.5259602, 0.4942766, 0.5125598, 0.4194964, 0.5109991, 0.4142717, 0.5154116, 0.4233454, 0.5171421, 0.4272031, 0.5173, 0.4290404, 0.505999, 0.3935746, 0.5059805, 0.3875604, 0.513346, 0.4226946, 0.5098645, 0.426877, 0.511093, 0.4229067, 0.515582, 0.4262744, 0.5159119, 0.428161, 0.5115214, 0.4300308, 0.5088879, 0.388568, 0.5139207, 0.4257345, 0.5146434, 0.4292752, 0.5143152, 0.4277154, 0.5118779, 0.4260169, 0.5130827, 0.4292758, 0.5089741, 0.3818634, 0.5123631, 0.3774666, 0.515716, 0.3742006, 0.5186342, 0.381152, 0.5153442, 0.3830908, 0.5190243, 0.3718101, 0.5216282, 0.390958, 0.518221, 0.3915989, 0.5149355, 0.3923093, 0.5119459, 0.3935225, 0.50901, 0.3959742, 0.505832, 0.4001409, 0.5251667, 0.4307308, 0.5261489, 0.4288475, 0.5191178, 0.4424657, 0.5224816, 0.4414, 0.520156, 0.45545, 0.5190066, 0.4733184, 0.5186089, 0.4842545, 0.5191101, 0.4880958, 0.5114416, 0.4383116, 0.5107412, 0.4420985, 0.5098312, 0.446657, 0.5086568, 0.4504334, 0.5099746, 0.4558073, 0.5211507, 0.4898788, 0.5223442, 0.493003, 0.5227098, 0.4940665, 0.5024046, 0.4880119, 0.5040509, 0.4898595, 0.5040509, 0.4898595, 0.5040509, 0.4898595, 0.5030177, 0.4825915, 0.5060076, 0.4404835, 0.5078844, 0.4387145, 0.5013477, 0.4533597, 0.5120766, 0.3852478, 0.525403, 0.3796692, 0.5196344, 0.4589468, 0.5217396, 0.4535865, 0.5228265, 0.4516923, 0.5244145, 0.4503075, 0.5082048, 0.4326719, 0.5085599, 0.4402659, 0.50641, 0.4424801, 0.5044668, 0.4460737, 0.5017514, 0.4478964, 0.5209205, 0.4583977, 0.5223821, 0.4569418, 0.5243231, 0.4561549, 0.5260237, 0.3695288, 0.518373, 0.4704387, 0.5184956, 0.4625645, 0.5213864, 0.433264, 0.5146485, 0.4685385, 0.5159659, 0.47295, 0.516306, 0.4753335, 0.5128893, 0.4546317, 0.5133968, 0.4500558, 0.5136565, 0.4465183, 0.5137914, 0.4420595, 0.5219102, 0.4717912, 0.5167281, 0.4781294, 0.516723, 0.4822774, 0.5172638, 0.4866486, 0.5169512, 0.4919337, 0.5174577, 0.4930554, 0.5185379, 0.494615, 0.5186517, 0.4951049, 0.5204102, 0.4395195, 0.5196198, 0.4375596, 0.5193263, 0.4327728, 0.524092, 0.4691078, 0.5236264, 0.472681, 0.5206982, 0.4660928, 0.5206307, 0.4717273, 0.5249344, 0.4688727, 0.5239724, 0.4683973, 0.523445, 0.4679751, 0.5233535, 0.468309, 0.5086551, 0.4304728, 0.5094764, 0.4298717, 0.510999, 0.4287483, 0.5126615, 0.4278263, 0.5198207, 0.433335, 0.5191265, 0.4353319, 0.5168489, 0.437659, 0.5140552, 0.438134, 0.5094975, 0.4374893, 0.5062044, 0.4274388, 0.5037194, 0.3939007, 0.5035434, 0.3987157, 0.503405, 0.4040196, 0.5043086, 0.4158195, 0.50426, 0.4195565, 0.5058317, 0.4232593, 0.5081198, 0.4313063, 0.5068785, 0.4299037, 0.508886, 0.436662, 0.5236, 0.4120353, 0.5204829, 0.4121434, 0.5187174, 0.4166523, 0.5190468, 0.4223134, 0.5187548, 0.4263379, 0.5185322, 0.4286073, 0.518505, 0.4305022, 0.5146278, 0.4807865, 0.5139546, 0.4788193, 0.5118611, 0.4740559, 0.5119398, 0.4591544, 0.5259605, 0.4974247, 0.5257563, 0.5020917, 0.5262013, 0.5054605, 0.5265065, 0.5134229, 0.5267031, 0.5175889, 0.5264094, 0.523959, 0.5262988, 0.5308166, 0.5265319, 0.5338427, 0.5272611, 0.5359648, 0.527676, 0.5367177, 0.5241878, 0.4968981, 0.5239664, 0.5009856, 0.5242835, 0.5050712, 0.5245614, 0.5135351, 0.524577, 0.5178955, 0.524031, 0.5235797, 0.5235442, 0.5300661, 0.5234694, 0.5329088, 0.5240764, 0.5345212, 0.5243567, 0.5349004, 0.5226137, 0.4963971, 0.522312, 0.4998041, 0.5224561, 0.5042851, 0.5227627, 0.5135065, 0.5225388, 0.5179018, 0.5215977, 0.522733, 0.5207238, 0.528276, 0.5204672, 0.5305818, 0.5206763, 0.5316662, 0.5210621, 0.5319586, 0.5186697, 0.4956963, 0.5183227, 0.4968918, 0.5175008, 0.4997062, 0.5163085, 0.5103907, 0.5156263, 0.5127422, 0.5139259, 0.5160579, 0.5123061, 0.5183222, 0.5112785, 0.518766, 0.5208888, 0.4774565, 0.5229507, 0.4762765, 0.5251997, 0.4763502, 0.5146899, 0.4898205, 0.5137489, 0.4957615, 0.5146297, 0.499447, 0.5159634, 0.5022234, 0.5171447, 0.504324, 0.5188991, 0.506489, 0.5227336, 0.5088432, 0.5246029, 0.5094308, 0.5265158, 0.5093862, 0.5268272, 0.534776, 0.5236772, 0.5338212, 0.5204127, 0.5314608, 0.5141895, 0.5234086, 0.5115218, 0.5189374, 0.5091299, 0.5138264, 0.5050129, 0.5020041, 0.5014281, 0.4806274, 0.5033671, 0.4608094, 0.5050976, 0.4552786, 0.5067995, 0.4496592, 0.5086691, 0.5132855, 0.5042733, 0.5004616, 0.5042733, 0.5004616, 0.5005577, 0.4787731, 0.5016376, 0.4586951, 0.513096, 0.4982523, 0.5123716, 0.4985532, 0.5110645, 0.4986548, 0.5079258, 0.4984373, 0.5052555, 0.4966517, 0.5033416, 0.4953565, 0.5026086, 0.4932555, 0.5026086, 0.4932555, 0.5028961, 0.4907047, 0.5140828, 0.497739, 0.5148714, 0.4970338, 0.5154633, 0.4964682, 0.5158001, 0.4962225, 0.5160781, 0.4961071, 0.502112, 0.450922, 0.5074565, 0.4371849, 0.5038841, 0.4438239, 0.505659, 0.4381154, 0.5070108, 0.4360383, 0.5080721, 0.4332199, 0.5078553, 0.4348274, 0.5075857, 0.4328845, 0.5249174, 0.3906209, 0.5219823, 0.3802438, 0.522348, 0.3702865, 0.5256255, 0.4383229, 0.5221307, 0.4447964, 0.5207595, 0.4480501, 0.5150001, 0.4566219, 0.5086268, 0.4608354, 0.5058367, 0.4613323, 0.5003132, 0.4558343, 0.5001105, 0.4515511, 0.5061736, 0.4123519, 0.5061736, 0.4123519, 0.4994052, 0.4573813, 0.5000524, 0.4588996, 0.5032859, 0.453561, 0.5000475, 0.4473416, 0.4998361, 0.4118991, 0.4994121, 0.4509867, 0.5006713, 0.4083081, 0.5019349, 0.4329593, 0.5109002, 0.4506194, 0.5115463, 0.4469071, 0.512222, 0.4423285, 0.5127523, 0.4383977, 0.5183647, 0.4654731, 0.5079724, 0.4339949, 0.5076973, 0.4341436, 0.5067038, 0.434889, 0.5053444, 0.4362372, 0.5036082, 0.4384126, 0.5017301, 0.4408897, 0.4999284, 0.4426889, 0.4991484, 0.444274, 0.4995598, 0.4448897, 0.5008506, 0.4456886, 0.517299, 0.4634845, 0.5175632, 0.4537725, 0.5179351, 0.4504058, 0.5178366, 0.4471442, 0.5186958, 0.4788968, 0.5204414, 0.4825446, 0.5204516, 0.4869904, 0.5186927, 0.4688022, 0.5181449, 0.4651247, 0.5238022, 0.4376705, 0.5233285, 0.4416686, 0.5223772, 0.4493055, 0.5206767, 0.4561692, 0.5203026, 0.4581093, 0.5200772, 0.4599361, 0.519802, 0.4628815, 0.5200397, 0.4647935, 0.5283804, 0.4013031, 0.5242425, 0.4011737, 0.5207019, 0.4011243, 0.5171955, 0.4011801, 0.514267, 0.4014922, 0.5114186, 0.4021903, 0.5086777, 0.4034515, 0.5059264, 0.406854, 0.5035128, 0.4103669, 0.5016498, 0.4136143, 0.5007403, 0.4183423, 0.499664, 0.4307488, 0.5182557, 0.4672165, 0.5178363, 0.5280578, 0.5173302, 0.5278966, 0.5171763, 0.5277235, 0.5174, 0.5268372, 0.5179636, 0.5250707, 0.5191006, 0.5203381, 0.5200526, 0.5167289, 0.5207425, 0.5128049, 0.5205989, 0.5079263, 0.5206563, 0.5028027, 0.5208454, 0.4987614, 0.5210082, 0.4959398, 0.5211981, 0.494332, 0.5209094, 0.4934054, 0.5198645, 0.4906172, 0.5198633, 0.4703579, 0.5221748, 0.4681373, 0.5221748, 0.4681373, 0.500613, 0.4768548, 0.5149933, 0.5230528, 0.52799, 0.5378553, 0.5245555, 0.5358157, 0.5317175, 0.5385249, 0.5215338, 0.5325875, 0.5182182, 0.5281701, 0.5166319, 0.5076794, 0.4997124, 0.4217686, 0.4994366, 0.4198795, 0.4992191, 0.4181542, 0.5077645, 0.4320506, 0.5067611, 0.4313167, 0.5052061, 0.4305578, 0.5036579, 0.4304595, 0.5023314, 0.4294252, 0.5009274, 0.4273423, 0.5002519, 0.4237102, 0.4991136, 0.4375646, 0.498891, 0.4372574, 0.4989114, 0.4371806, 0.4997598, 0.4373955, 0.5076507, 0.4335491, 0.5066882, 0.4338126, 0.5052698, 0.4344437, 0.5036389, 0.4356018, 0.5017768, 0.4370481, 0.4998431, 0.4379302, 0.5454207, 0.5170873, 0.5485017, 0.519305, 0.5509765, 0.5146778, 0.5475485, 0.5134099, 0.531316, 0.5309631, 0.5325331, 0.5340125, 0.5356744, 0.5332689, 0.5342113, 0.530388, 0.543057, 0.5139132, 0.5448332, 0.510489, 0.5529261, 0.5148628, 0.5545042, 0.514308, 0.5588121, 0.5018246, 0.5567849, 0.5033133, 0.5305797, 0.5241289, 0.5331432, 0.5239521, 0.5373638, 0.5288897, 0.5390909, 0.5311416, 0.5426177, 0.527677, 0.5403554, 0.5260955, 0.5419505, 0.5115495, 0.5436745, 0.5083596, 0.5502994, 0.5045748, 0.5543525, 0.5040991, 0.5550153, 0.4974133, 0.5507204, 0.4990106, 0.5602868, 0.4944295, 0.5578316, 0.496355, 0.5302178, 0.51776, 0.5324115, 0.5182269, 0.535901, 0.5234202, 0.5386935, 0.5214866, 0.5432247, 0.5216781, 0.5410914, 0.5176402, 0.5469999, 0.5033892, 0.5476563, 0.479039, 0.5444626, 0.4837652, 0.5467535, 0.4946515, 0.5505342, 0.4928304, 0.560482, 0.5000663, 0.561639, 0.4989915, 0.5634505, 0.4916273, 0.5626336, 0.4913495, 0.5346822, 0.5184692, 0.537468, 0.517651, 0.5471591, 0.4992332, 0.5415592, 0.5030531, 0.5399978, 0.5051721, 0.5410554, 0.5086998, 0.5426176, 0.5060568, 0.5455179, 0.5024348, 0.5456287, 0.4989658, 0.5300217, 0.5095683, 0.5302864, 0.5135501, 0.5323061, 0.5138805, 0.5320255, 0.5097823, 0.5451866, 0.4951691, 0.5642039, 0.4771829, 0.5654593, 0.4579035, 0.5638268, 0.4558304, 0.5628611, 0.4783415, 0.5338801, 0.5092499, 0.5342487, 0.5140129, 0.5365013, 0.5134861, 0.5360902, 0.5085142, 0.5389632, 0.5112838, 0.5379934, 0.5072723, 0.5380619, 0.4974731, 0.5390275, 0.5003823, 0.5402998, 0.4997486, 0.5395643, 0.4976242, 0.5442446, 0.5012475, 0.5429652, 0.4998824, 0.5433593, 0.4855697, 0.544726, 0.4730939, 0.5428204, 0.4782561, 0.5289373, 0.5022401, 0.5294386, 0.5056218, 0.5313412, 0.5053622, 0.530822, 0.5012321, 0.544377, 0.4984379, 0.5431411, 0.4977872, 0.5419691, 0.4804584, 0.5406467, 0.4726022, 0.5418531, 0.4679369, 0.5420005, 0.4492453, 0.5418209, 0.4530685, 0.5446996, 0.4549237, 0.5445917, 0.4503506, 0.5326536, 0.5002053, 0.5331824, 0.5047637, 0.535058, 0.5034153, 0.5344095, 0.4992515, 0.5370567, 0.5016863, 0.5363621, 0.4980945, 0.5377651, 0.4959441, 0.539219, 0.4961683, 0.5420303, 0.498449, 0.5413213, 0.4973624, 0.5428979, 0.4954317, 0.54403, 0.4953874, 0.5422842, 0.4874232, 0.5412585, 0.489539, 0.540168, 0.4752478, 0.5289553, 0.4974844, 0.5308322, 0.497083, 0.5377135, 0.4951924, 0.5391364, 0.4954919, 0.5421669, 0.4969155, 0.5415351, 0.4963419, 0.5402731, 0.486045, 0.5412362, 0.4830349, 0.5394629, 0.4781862, 0.5371115, 0.4591143, 0.5375668, 0.4508953, 0.5358484, 0.4481651, 0.5354172, 0.4553487, 0.5443706, 0.4467833, 0.5422871, 0.4460815, 0.5562983, 0.4539492, 0.5541043, 0.4484433, 0.5520805, 0.4499515, 0.5537432, 0.4555803, 0.5291477, 0.4943529, 0.5310964, 0.4942411, 0.5325094, 0.4967016, 0.5344118, 0.4962748, 0.5361061, 0.4961212, 0.5409567, 0.4964447, 0.5419762, 0.4954417, 0.5404904, 0.491493, 0.5397704, 0.4929572, 0.5413591, 0.4954746, 0.5376824, 0.4479422, 0.5382162, 0.4447309, 0.5366582, 0.4420065, 0.5360777, 0.4450017, 0.5440897, 0.4423001, 0.5424384, 0.4419246, 0.5465856, 0.4471605, 0.5457898, 0.442569, 0.5518707, 0.4448175, 0.5503265, 0.4462747, 0.5327181, 0.4942899, 0.534495, 0.4945476, 0.5361792, 0.4948833, 0.5408252, 0.495984, 0.5412366, 0.49614, 0.5394272, 0.4892553, 0.5384556, 0.4916666, 0.5388571, 0.4427075, 0.5398865, 0.4474453, 0.5404832, 0.4448904, 0.5410041, 0.496043, 0.5409986, 0.4956744, 0.5393917, 0.4940228, 0.5325197, 0.441768, 0.5324534, 0.4492867, 0.5339507, 0.4520656, 0.5341461, 0.4449317, 0.5409434, 0.4412208, 0.5396487, 0.4399555, 0.5598022, 0.444821, 0.5571126, 0.4414295, 0.5566189, 0.4441038, 0.5593131, 0.4483034, 0.5408434, 0.4958354, 0.5390505, 0.4950258, 0.5380673, 0.4927859, 0.5312645, 0.4355649, 0.5299451, 0.4343064, 0.5295922, 0.4383305, 0.5311944, 0.4396552, 0.5418379, 0.4307765, 0.5424171, 0.4382329, 0.5437278, 0.4383951, 0.5432906, 0.4302736, 0.545122, 0.4386825, 0.5449565, 0.4302311, 0.5544698, 0.4383083, 0.5538977, 0.4407117, 0.5568379, 0.4332235, 0.5571839, 0.4358664, 0.5599722, 0.4373111, 0.5593455, 0.4333111, 0.5374984, 0.4944379, 0.5379537, 0.4659231, 0.5369455, 0.4625254, 0.5365773, 0.4627796, 0.537325, 0.4648085, 0.5360308, 0.465579, 0.5362731, 0.4634345, 0.5351595, 0.4618008, 0.5349359, 0.4643927, 0.5481775, 0.4318391, 0.5477878, 0.4383377, 0.5488355, 0.4378355, 0.5490412, 0.4323321, 0.5521782, 0.436287, 0.551587, 0.4374072, 0.5556549, 0.4284742, 0.5562788, 0.4308772, 0.5585944, 0.4298069, 0.5578668, 0.4264094, 0.5361985, 0.484328, 0.5342368, 0.4826489, 0.5336936, 0.4870892, 0.5352762, 0.4881257, 0.5374815, 0.4684007, 0.5377094, 0.4704559, 0.5322958, 0.4559045, 0.5306657, 0.4540739, 0.5302889, 0.4569536, 0.532038, 0.458451, 0.5292259, 0.445664, 0.5309867, 0.447246, 0.5324797, 0.4332225, 0.5346629, 0.43805, 0.5350124, 0.4316908, 0.5336443, 0.4247145, 0.5411299, 0.4378585, 0.540758, 0.4312872, 0.5397505, 0.4323493, 0.540083, 0.4368391, 0.5534604, 0.429437, 0.5540237, 0.4311147, 0.5571289, 0.423027, 0.5545019, 0.4259497, 0.5365933, 0.4709099, 0.535477, 0.4705073, 0.5347173, 0.4718394, 0.5370483, 0.4734578, 0.5352472, 0.4694617, 0.5350642, 0.4685302, 0.5338185, 0.4672183, 0.5299178, 0.4609177, 0.5318157, 0.4619136, 0.5317949, 0.4216713, 0.5312322, 0.4309849, 0.5526712, 0.4282281, 0.530017, 0.4808517, 0.532284, 0.4810934, 0.5316764, 0.476322, 0.5292547, 0.4763861, 0.5293068, 0.4640494, 0.531094, 0.4643785, 0.5287708, 0.4528601, 0.5283164, 0.4561517, 0.5387896, 0.4161756, 0.5366586, 0.4114935, 0.5511299, 0.4301825, 0.5517636, 0.4307356, 0.553003, 0.4234044, 0.5515915, 0.4266491, 0.5315979, 0.4892766, 0.5308003, 0.4929784, 0.5324485, 0.4930813, 0.5329855, 0.4899586, 0.5306669, 0.4849761, 0.5324636, 0.4858885, 0.5300401, 0.4662642, 0.5290104, 0.4679886, 0.5279405, 0.4603674, 0.5306684, 0.4200619, 0.530362, 0.4288789, 0.5387491, 0.4222258, 0.5502236, 0.4294423, 0.527535, 0.4637705, 0.532932, 0.4117765, 0.540516, 0.420914, 0.5407372, 0.4152277, 0.5392929, 0.4266313, 0.5405197, 0.4252043, 0.5551511, 0.4195257, 0.5294652, 0.4890499, 0.52894, 0.4705788, 0.5294029, 0.4698469, 0.5287972, 0.4690764, 0.5282512, 0.4696085, 0.5282708, 0.4684157, 0.5286833, 0.4666001, 0.5271461, 0.4667094, 0.5270809, 0.4688895, 0.5397542, 0.4096711, 0.5436659, 0.4147942, 0.5426758, 0.4201547, 0.5395188, 0.4294252, 0.5407822, 0.4282105, 0.5388961, 0.4341294, 0.5386822, 0.4350827, 0.539278, 0.4356263, 0.5391251, 0.43339, 0.5513798, 0.4211337, 0.5529433, 0.4162348, 0.550439, 0.4134122, 0.5487703, 0.419439, 0.528538, 0.473076, 0.5279391, 0.4711048, 0.528838, 0.493089, 0.5305966, 0.472734, 0.5309604, 0.4709093, 0.5330355, 0.4719, 0.5272186, 0.4701047, 0.5431445, 0.4080424, 0.5424486, 0.4242967, 0.5369611, 0.4339508, 0.5379563, 0.4337647, 0.5497158, 0.4316017, 0.5488481, 0.4310881, 0.5498688, 0.4252153, 0.5484152, 0.42829, 0.5470665, 0.4137426, 0.5454582, 0.4196584, 0.5446737, 0.4238586, 0.5422894, 0.4275982, 0.5395985, 0.4313708, 0.54065, 0.430113, 0.5472378, 0.4240538, 0.5461232, 0.4274386, 0.5439254, 0.4272486, 0.541882, 0.4295098, 0.54663, 0.4309797, 0.5471448, 0.4299839, 0.5573492, 0.3868856, 0.5531622, 0.3811742, 0.5521389, 0.3880308, 0.556365, 0.393098, 0.5434582, 0.4291728, 0.545251, 0.4291824, 0.5488966, 0.3767942, 0.547842, 0.3847054, 0.5446596, 0.3736176, 0.5399153, 0.3806318, 0.5438027, 0.3825303, 0.5409537, 0.3713477, 0.5372302, 0.3699736, 0.5333623, 0.3693709, 0.5324879, 0.3794629, 0.5361113, 0.3798652, 0.5359221, 0.3904964, 0.5362139, 0.4005216, 0.5401694, 0.4004897, 0.5396804, 0.3910092, 0.5441039, 0.4009056, 0.5434399, 0.3917021, 0.5470849, 0.3930264, 0.5474774, 0.4016791, 0.5508255, 0.4030625, 0.5511159, 0.3955609, 0.5545349, 0.4065845, 0.5553991, 0.3997724, 0.5587698, 0.40368, 0.5577544, 0.4101535, 0.5601073, 0.4134427, 0.5610143, 0.4087854, 0.5399718, 0.514618, 0.5358059, 0.4675807, 0.5345223, 0.4661513, 0.5363225, 0.4689666, 0.534333, 0.4416679, 0.5336838, 0.4581133, 0.5332742, 0.4599694, 0.5353453, 0.4604604, 0.5331156, 0.4629472, 0.5328915, 0.464894, 0.5322742, 0.4661415, 0.5489076, 0.4608382, 0.5452761, 0.4592958, 0.5478634, 0.4560239, 0.5472317, 0.4509127, 0.546568, 0.4386218, 0.5488211, 0.4416454, 0.5474521, 0.4423635, 0.5485689, 0.4469134, 0.5583063, 0.4883017, 0.5553941, 0.4898327, 0.5606765, 0.4866073, 0.5608163, 0.4791583, 0.5583109, 0.4804506, 0.5618417, 0.4521847, 0.5606886, 0.4564758, 0.5554585, 0.4820354, 0.5501586, 0.5197161, 0.5523489, 0.4613305, 0.5583832, 0.4591737, 0.55547, 0.4610195, 0.5421509, 0.4568763, 0.5353115, 0.4589232, 0.5338238, 0.4561616, 0.5290086, 0.4502779, 0.5307815, 0.4516847, 0.5500172, 0.4405405, 0.5531573, 0.4427439, 0.5510178, 0.438953, 0.5556809, 0.4464101, 0.5509319, 0.4562214, 0.5609327, 0.4275854, 0.5595726, 0.4231687, 0.558248, 0.419259, 0.5562645, 0.4159099, 0.5537311, 0.4122847, 0.550654, 0.4094776, 0.5472796, 0.4082274, 0.5322706, 0.3903958, 0.5325288, 0.4008178, 0.5389939, 0.4823132, 0.5379923, 0.4866434, 0.5323279, 0.4535939, 0.5362714, 0.4915036, 0.5367863, 0.4898936, 0.5346258, 0.4906225, 0.535912, 0.4939293, 0.5342607, 0.493437, 0.5365384, 0.4370371, 0.5376344, 0.439725, 0.5385646, 0.4377798, 0.5378668, 0.4361227, 0.5324749, 0.4378886, 0.5394332, 0.4507784, 0.5395001, 0.4540794, 0.5386348, 0.4338491, 0.5665006, 0.4595018, 0.5669287, 0.4526103, 0.5658699, 0.4514417, 0.5391102, 0.4632103, 0.5338761, 0.4740944, 0.529866, 0.4683172, 0.5317349, 0.4681761, 0.5509768, 0.4351904, 0.5503709, 0.4360346, 0.5503705, 0.4323275, 0.5496844, 0.4370469, 0.54991, 0.4329104, 0.560563, 0.3932698, 0.5596858, 0.3982576, 0.5509986, 0.4328923, 0.5521034, 0.4319761, 0.5504451, 0.4333929, 0.5335031, 0.5350255, 0.5342704, 0.5361831, 0.5367693, 0.5341273, 0.5403964, 0.5319005, 0.5439149, 0.5284149, 0.5415519, 0.5322649, 0.5449749, 0.5286335, 0.5368081, 0.4790006, 0.5378031, 0.5349188, 0.549771, 0.4506892, 0.5557368, 0.51326, 0.5625945, 0.484884, 0.5582474, 0.4513769, 0.5546252, 0.4347884, 0.5543588, 0.4330245, 0.5525362, 0.4342769, 0.552359, 0.4330466, 0.5513648, 0.434043, 0.5513723, 0.4334975, 0.5507914, 0.4338076, 0.5640986, 0.4839762, 0.562273, 0.447841, 0.5525189, 0.4352178, 0.5512398, 0.4345628, 0.5547921, 0.4364786, 0.5573743, 0.43857, 0.5599483, 0.4411359, 0.5341354, 0.4775496, 0.536925, 0.4652077, 0.5369505, 0.4673553, 0.5643168, 0.449942, 0.5650604, 0.4775471, 0.5646012, 0.4845578, 0.5622477, 0.4044979, 0.5633053, 0.3998919, 0.5676808, 0.4539373, 0.5672737, 0.4612604, 0.5656301, 0.4776046, 0.5568514, 0.5123027, 0.5349774, 0.5369678, 0.5386215, 0.5353652, 0.5422502, 0.5326315, 0.5456447, 0.5288739, 0.5428848, 0.533281, 0.5466413, 0.5289932, 0.5393062, 0.5363012, 0.5355839, 0.5381125, 0.5493618, 0.5239819, 0.5484669, 0.5243231, 0.5537754, 0.5182928, 0.5503421, 0.5239107, 0.5456756, 0.5236503, 0.5472402, 0.5242768, 0.5515005, 0.519559, 0.5527408, 0.5188408, 0.5617582, 0.4182332, 0.5618256, 0.4325357, 0.5628716, 0.415076, 0.5630103, 0.4236621, 0.5638686, 0.4309024, 0.5651786, 0.4296841, 0.5642521, 0.4217635, 0.5642637, 0.4116709, 0.5656174, 0.4198215, 0.5665551, 0.4286614, 0.5655529, 0.4079136, 0.5673022, 0.4179843, 0.5679885, 0.428123, 0.567201, 0.4452705, 0.5661129, 0.4446501, 0.5646421, 0.4440383, 0.5679151, 0.4461067, 0.567978, 0.4376364, 0.5672919, 0.4374467, 0.5625165, 0.438211, 0.5625128, 0.4430203, 0.5646182, 0.4378166, 0.5659868, 0.4375311, 0.5509959, 0.4342118, 0.5271757, 0.4930541, 0.5005186, 0.4813924, 0.5636402, 0.4820844, 0.519364, 0.4319496, 0.5196515, 0.430569, 0.520296, 0.4292214, 0.5211173, 0.4264407, 0.5200787, 0.4175123, 0.522254, 0.4170549, 0.5244803, 0.4163135, 0.5281973, 0.4157176, 0.5320703, 0.416168, 0.5346063, 0.4167803, 0.5371284, 0.416921, 0.5366876, 0.4268364, 0.5379562, 0.4296295, 0.5385026, 0.4312371, 0.5389287, 0.4326329, 0.5435893, 0.4370566, 0.5423552, 0.4368228, 0.5449256, 0.4374962, 0.5486072, 0.4371392, 0.5476428, 0.4373417, 0.5402724, 0.4363048, 0.5412844, 0.4367318, 0.5393855, 0.4352692, 0.5389952, 0.4347988, 0.5463924, 0.4374801, 0.5494714, 0.4365282, 0.5502191, 0.4357179, 0.5507625, 0.4349541, 0.515683, 0.43622, 0.5143549, 0.4364325, 0.5130244, 0.4368971, 0.5106808, 0.4367071, 0.5098066, 0.4364831, 0.5169247, 0.4361953, 0.5180691, 0.4358197, 0.519612, 0.434332, 0.5191387, 0.4348202, 0.5117009, 0.4368452, 0.5091501, 0.4359515, 0.5084382, 0.4352449, 0.5081075, 0.4345014, 0.5079842, 0.4336739, 0.550984, 0.4344639, 0.5206764, 0.4695012, 0.5338358, 0.4696027, 0.516386, 0.4958479, 0.5164266, 0.496817, 0.5176758, 0.4950063, 0.5177372, 0.4969715, 0.5187686, 0.494428, 0.5189214, 0.4965237, 0.5246068, 0.4923989, 0.5245897, 0.4951188, 0.5231762, 0.4952158, 0.5231775, 0.4925664, 0.5262778, 0.4925068, 0.5262966, 0.495211, 0.5277531, 0.4925529, 0.5277339, 0.4952165, 0.5202019, 0.4960469, 0.5201556, 0.493714, 0.5217269, 0.493015, 0.5217361, 0.4954698, 0.5161682, 0.4961361, 0.5408205, 0.4968233, 0.5392657, 0.4970272, 0.5394026, 0.4949462, 0.5408329, 0.4957563, 0.5380007, 0.4965695, 0.538183, 0.4944081, 0.5310526, 0.4925023, 0.5327016, 0.4926674, 0.5327728, 0.495381, 0.5311472, 0.4952524, 0.5292441, 0.4952675, 0.5292274, 0.4925492, 0.5363728, 0.4961329, 0.5346228, 0.4956177, 0.5345818, 0.4931046, 0.5364366, 0.493745, 0.5410045, 0.4960869, 0.5459003, 0.4818327, 0.543705, 0.4760175, 0.5412275, 0.4704145, 0.5386363, 0.4651472, 0.5369796, 0.4609878, 0.5354096, 0.4572914, 0.5338314, 0.4541353, 0.5323954, 0.4513646, 0.5309012, 0.4492795, 0.5291021, 0.447812, 0.5270317, 0.44706, 0.5249104, 0.4478333, 0.523368, 0.449296, 0.5220818, 0.4513806, 0.5210612, 0.4541574, 0.5200362, 0.4573487, 0.5188067, 0.4611324, 0.5175887, 0.4653865, 0.515449, 0.4709371, 0.513028, 0.4768184, 0.5110503, 0.4826895, 0.5094257, 0.4939414, 0.5095584, 0.49861, 0.5101848, 0.5030673, 0.5130144, 0.510903, 0.5146929, 0.514566, 0.5164793, 0.5187055, 0.5186265, 0.5230164, 0.5210845, 0.5258695, 0.5238603, 0.5271857, 0.5262975, 0.5276449, 0.528585, 0.5277579, 0.530996, 0.527789, 0.5335739, 0.5274928, 0.5366379, 0.526472, 0.5395883, 0.5241131, 0.5421551, 0.5199376, 0.5442289, 0.5157422, 0.5461444, 0.5121276, 0.5486974, 0.504151, 0.5489451, 0.4992613, 0.5486473, 0.4939262, 0.5502781, 0.4743578, 0.5457399, 0.4691487, 0.5422742, 0.4646609, 0.5394439, 0.4605775, 0.5372872, 0.4567289, 0.5354647, 0.4530206, 0.5339223, 0.4497719, 0.5324916, 0.4470497, 0.5310845, 0.4448707, 0.5293626, 0.4434125, 0.527259, 0.4427665, 0.5068428, 0.4754201, 0.5110286, 0.4699329, 0.5144041, 0.4649541, 0.5171905, 0.4606838, 0.5190016, 0.4567549, 0.5203383, 0.4530999, 0.521582, 0.449826, 0.52262, 0.4470726, 0.5237147, 0.4448922, 0.5251727, 0.4434571, 0.5058795, 0.4844314, 0.5063004, 0.4915195, 0.5067702, 0.4975547, 0.5079136, 0.5033183, 0.5113486, 0.5127221, 0.513248, 0.5171544, 0.515408, 0.5215407, 0.5176103, 0.5260512, 0.5206204, 0.5294681, 0.5236329, 0.5316929, 0.5265391, 0.5325648, 0.5290447, 0.5327573, 0.531664, 0.5327165, 0.5348994, 0.5320317, 0.5381593, 0.5300869, 0.5414235, 0.5269879, 0.5442352, 0.5226365, 0.5467078, 0.518233, 0.5489105, 0.5140236, 0.5521623, 0.5044429, 0.5527077, 0.4982942, 0.552699, 0.4914468, 0.552029, 0.4837796, 0.556986, 0.4668395, 0.5600202, 0.4653328, 0.5667057, 0.466927, 0.5659806, 0.465685, 0.5628756, 0.4627016, 0.5647575, 0.4644921, 0.553736, 0.4675949, 0.5008552, 0.4648679, 0.5020902, 0.4668762, 0.4994459, 0.4639333, 0.4994783, 0.4620782, 0.5001968, 0.4650618, 0.5017177, 0.4661969, 0.5043709, 0.4679497, 0.5499239, 0.4667458, 0.5075097, 0.4671906, 0.5422816, 0.4609017, 0.5395243, 0.4575586, 0.5458246, 0.464095, 0.5355835, 0.4506263, 0.5373172, 0.4539683, 0.5340703, 0.4476818, 0.5326196, 0.4446879, 0.5312094, 0.4424458, 0.5294617, 0.4408719, 0.5274147, 0.4405039, 0.5172759, 0.4573747, 0.5145702, 0.4608531, 0.5191231, 0.4538799, 0.5111515, 0.4643365, 0.5228413, 0.4446748, 0.5217519, 0.4476673, 0.5239155, 0.4424404, 0.5254369, 0.440897, 0.5205219, 0.4506347, 0.5015889, 0.4729042, 0.5004677, 0.4716012, 0.5032755, 0.4743695, 0.5114076, 0.4896319, 0.5098528, 0.4885319, 0.5078797, 0.4867208, 0.560679, 0.4718177, 0.5579349, 0.4725667, 0.5627104, 0.4711713, 0.5547993, 0.4735842, 0.5443604, 0.4905335, 0.545835, 0.4893108, 0.5475413, 0.4879864, 0.549596, 0.4861202, 0.5660601, 0.472042, 0.5654318, 0.4715077, 0.5643783, 0.4711314, 0.4998169, 0.4706944, 0.4998432, 0.4705485, 0.5008518, 0.470871, 0.5018773, 0.4713022, 0.5126058, 0.4908989, 0.5422197, 0.4927793, 0.5432587, 0.491657, 0.540814, 0.4943779, 0.5414113, 0.4936417, 0.5148445, 0.4940117, 0.5155513, 0.4947228, 0.5140373, 0.4931361, 0.5132879, 0.4920177, 0.5068105, 0.5047846, 0.5063943, 0.5059606, 0.506345, 0.5073109, 0.5068902, 0.5081986, 0.5081225, 0.5083763, 0.5095194, 0.5083801, 0.510389, 0.5081686, 0.5114797, 0.5071265, 0.5128292, 0.5057294, 0.5137486, 0.5042058, 0.5144129, 0.5027257, 0.5152941, 0.5007766, 0.5159601, 0.4987661, 0.5163642, 0.4973796, 0.5165882, 0.4962622, 0.5168182, 0.4956329, 0.5170023, 0.4969569, 0.516934, 0.4954471, 0.5165536, 0.495615, 0.5161246, 0.4952661, 0.5594271, 0.5058469, 0.5583917, 0.5070626, 0.5571054, 0.508553, 0.5553342, 0.5093982, 0.5530463, 0.509701, 0.5509073, 0.5096884, 0.5493428, 0.509322, 0.5477228, 0.5084259, 0.5461677, 0.5070653, 0.5448866, 0.5054546, 0.543752, 0.5036794, 0.542546, 0.5014957, 0.5415038, 0.4992978, 0.5408409, 0.4977163, 0.5403696, 0.4964023, 0.5401971, 0.4956746, 0.5401667, 0.4969859, 0.5402682, 0.4953657, 0.5401493, 0.4954467, 0.5403807, 0.4950199};
	private double[] finalUVs = {0.5249623, 0.6137605, 0.524815, 0.6138977, 0.5241948, 0.6161117, 0.523805, 0.6140409, 0.5237895, 0.6027625, 0.523244, 0.5900758, 0.5230284, 0.5837364, 0.5229825, 0.5746248, 0.5225312, 0.5740718, 0.521844, 0.5646847, 0.5199369, 0.5569303, 0.5220523, 0.4165224, 0.5219039, 0.439684, 0.5220643, 0.4551062, 0.5215987, 0.4965859, 0.5213596, 0.5126367, 0.5221671, 0.3907896, 0.5220734, 0.478081, 0.5224021, 0.4711544, 0.5214077, 0.5218351, 0.5209976, 0.4905914, 0.5217062, 0.4837162, 0.5213206, 0.5278059, 0.5213289, 0.4927806, 0.5219811, 0.4065366, 0.5220122, 0.4489026, 0.5223743, 0.4630442, 0.5223215, 0.3756964, 0.5216088, 0.3323247, 0.5215146, 0.2893448, 0.521535, 0.3097621, 0.5211495, 0.4879746, 0.5218368, 0.5031688, 0.5230421, 0.5781817, 0.5244617, 0.6159322, 0.5221447, 0.4244848, 0.4617176, 0.4613923, 0.462369, 0.493094, 0.4830236, 0.5769118, 0.4913493, 0.590605, 0.4911936, 0.5864217, 0.4834334, 0.5725216, 0.4988457, 0.5945402, 0.4939081, 0.5948424, 0.4758777, 0.565924, 0.5035436, 0.5877492, 0.4918188, 0.5800368, 0.4849164, 0.5772819, 0.4766379, 0.560907, 0.4976611, 0.5757639, 0.4772256, 0.5586928, 0.4862343, 0.5640156, 0.4663177, 0.540715, 0.4857499, 0.517056, 0.4923817, 0.5257863, 0.4909139, 0.5484614, 0.4832123, 0.5432818, 0.46598, 0.5356586, 0.5053523, 0.5826213, 0.4933566, 0.5622993, 0.5059813, 0.5782781, 0.4990874, 0.5712112, 0.5076431, 0.5647922, 0.4996462, 0.56795, 0.4584006, 0.4560088, 0.4601111, 0.5071675, 0.5027953, 0.559316, 0.4977449, 0.5595169, 0.496096, 0.5608492, 0.4937176, 0.5506736, 0.5075881, 0.5617384, 0.5006471, 0.5559146, 0.494995, 0.5516923, 0.4962329, 0.446194, 0.4960018, 0.4546669, 0.5082363, 0.5583017, 0.5037549, 0.5572029, 0.4991919, 0.5518512, 0.4966389, 0.5326146, 0.4949313, 0.5288811, 0.5087684, 0.5549383, 0.5041465, 0.5550173, 0.5015329, 0.5541137, 0.4994189, 0.5396715, 0.4986134, 0.5210463, 0.503823, 0.4500976, 0.5034248, 0.4688025, 0.4792222, 0.462147, 0.474045, 0.4444912, 0.5046483, 0.5536357, 0.5022905, 0.5524437, 0.5002652, 0.5513132, 0.5002607, 0.5264336, 0.5017904, 0.4853112, 0.5031604, 0.4367174, 0.5038682, 0.4436184, 0.4953968, 0.4394877, 0.5025448, 0.5517887, 0.5012541, 0.5507055, 0.5008853, 0.5419887, 0.4803009, 0.4398643, 0.4777249, 0.4366011, 0.4621241, 0.4107635, 0.5016775, 0.550175, 0.5018821, 0.5438352, 0.5020681, 0.5325473, 0.5146112, 0.427984, 0.5141892, 0.4439301, 0.5090373, 0.4535647, 0.5061194, 0.4311063, 0.5068187, 0.4375469, 0.4988783, 0.4369622, 0.4951181, 0.4311726, 0.4950905, 0.423727, 0.4656965, 0.4354497, 0.4699537, 0.42904, 0.5029096, 0.5453404, 0.5056373, 0.5303675, 0.5033718, 0.4770898, 0.5152532, 0.4196546, 0.5181407, 0.4176541, 0.4960144, 0.407683, 0.4827752, 0.4303281, 0.4849473, 0.4234661, 0.4701016, 0.4126562, 0.4648679, 0.3931075, 0.4560546, 0.4439374, 0.4558891, 0.4466576, 0.4569965, 0.4020278, 0.4560818, 0.4322963, 0.50666, 0.5337198, 0.5103655, 0.4988287, 0.502518, 0.4823646, 0.5034633, 0.4781489, 0.5056495, 0.4714587, 0.5072359, 0.421276, 0.4982405, 0.429658, 0.4844346, 0.4095661, 0.4735552, 0.4123545, 0.4710582, 0.4036255, 0.4673885, 0.3995394, 0.4568145, 0.4006607, 0.4585102, 0.4046104, 0.5077163, 0.5396289, 0.5135714, 0.5128708, 0.5027079, 0.4894283, 0.5042297, 0.4859514, 0.5055733, 0.4741036, 0.5105355, 0.4619247, 0.513415, 0.4584076, 0.5176643, 0.4408641, 0.5099347, 0.4232138, 0.5132585, 0.413644, 0.4985231, 0.4089333, 0.4613525, 0.3776166, 0.5135812, 0.5220248, 0.5049965, 0.4933938, 0.5060898, 0.4897545, 0.5058643, 0.4876723, 0.5051772, 0.4791535, 0.5057091, 0.4825954, 0.5111646, 0.3993281, 0.5148478, 0.3939806, 0.4686822, 0.3936625, 0.4728715, 0.399299, 0.5154809, 0.5269607, 0.5169022, 0.5121694, 0.5186149, 0.4964454, 0.5073788, 0.4847849, 0.5109912, 0.4740652, 0.5146506, 0.4723783, 0.5154333, 0.4785134, 0.511865, 0.4788991, 0.5174161, 0.456052, 0.4773401, 0.4123692, 0.4746097, 0.4053188, 0.467454, 0.3860095, 0.4637521, 0.3577028, 0.4646942, 0.3659877, 0.5146576, 0.5366627, 0.513046, 0.4827252, 0.5154646, 0.4834383, 0.5175577, 0.4892676, 0.5174636, 0.3919179, 0.5094649, 0.4103233, 0.4999735, 0.4208876, 0.5007583, 0.4271697, 0.5004525, 0.4111886, 0.4814219, 0.411611, 0.47802, 0.3998547, 0.515459, 0.5553796, 0.5163345, 0.5211231, 0.518764, 0.4716908, 0.518747, 0.4782565, 0.4993705, 0.3921876, 0.4991855, 0.3820322, 0.5047426, 0.4193484, 0.502823, 0.417096, 0.4801755, 0.418687, 0.479095, 0.4061699, 0.4769166, 0.3823214, 0.4791552, 0.3905526, 0.5180384, 0.5273954, 0.5143037, 0.4917965, 0.5171853, 0.4912555, 0.5163291, 0.489704, 0.5187173, 0.483835, 0.5191603, 0.4903166, 0.5007943, 0.3715028, 0.4989618, 0.3982717, 0.5026037, 0.4148593, 0.4829126, 0.4104443, 0.4808539, 0.4045315, 0.4815013, 0.3690565, 0.4637704, 0.3490023, 0.5170619, 0.5367419, 0.5191299, 0.4923204, 0.4938385, 0.3807211, 0.4946922, 0.3680847, 0.4954425, 0.3898602, 0.5043712, 0.4145704, 0.4816105, 0.3968467, 0.4811269, 0.3766017, 0.4842965, 0.387544, 0.4874598, 0.3675607, 0.5179467, 0.5566414, 0.490027, 0.3883728, 0.4873025, 0.3782234, 0.4952846, 0.3956761, 0.4981421, 0.4028713, 0.4983708, 0.4062336, 0.4729441, 0.3361677, 0.4720229, 0.324422, 0.4913496, 0.3943498, 0.4842994, 0.4020814, 0.4866041, 0.3946428, 0.4952158, 0.4010752, 0.4956385, 0.4045255, 0.4869762, 0.4079811, 0.479616, 0.3265513, 0.4924223, 0.4000266, 0.4930826, 0.4065922, 0.4928624, 0.4036536, 0.4886606, 0.4005279, 0.4899381, 0.4065614, 0.4786013, 0.3134032, 0.485901, 0.304885, 0.4930409, 0.2985453, 0.5005778, 0.3124421, 0.4939485, 0.3161174, 0.4996272, 0.2939265, 0.5078756, 0.3325673, 0.5008499, 0.3334778, 0.4940539, 0.3345944, 0.4875222, 0.3367315, 0.4809221, 0.3413118, 0.4738093, 0.3491966, 0.5154975, 0.4103635, 0.517888, 0.4073625, 0.5023427, 0.4325324, 0.5099488, 0.4307897, 0.5061336, 0.4606004, 0.5049803, 0.4981758, 0.5063688, 0.5184839, 0.5081103, 0.5257438, 0.4873088, 0.4242678, 0.4851134, 0.4319029, 0.4835376, 0.4413989, 0.481448, 0.4498271, 0.4845639, 0.4617487, 0.5126999, 0.5276066, 0.5124699, 0.5363866, 0.5130277, 0.5541928, 0.4667538, 0.5276311, 0.4729795, 0.5340733, 0.4593903, 0.5139573, 0.4584108, 0.5019401, 0.4719324, 0.5198368, 0.4748102, 0.4279096, 0.4790908, 0.4247209, 0.4596439, 0.4478347, 0.4866285, 0.3201668, 0.5146063, 0.3099875, 0.5065653, 0.4683991, 0.5108813, 0.4570284, 0.5134962, 0.4533384, 0.517343, 0.4506007, 0.4804762, 0.4128273, 0.4806641, 0.4279525, 0.4756584, 0.4321785, 0.47169, 0.4397073, 0.4659727, 0.4429055, 0.5110021, 0.4671491, 0.5144743, 0.4644694, 0.5187326, 0.463046, 0.5142649, 0.2896699, 0.5032268, 0.494116, 0.5031511, 0.476753, 0.5065727, 0.4144865, 0.4949354, 0.4901302, 0.4984068, 0.4998384, 0.4995555, 0.5040271, 0.490337, 0.4589842, 0.4909905, 0.4487826, 0.4913901, 0.4410362, 0.4917895, 0.4318639, 0.511103, 0.4936607, 0.5012204, 0.5091495, 0.5026858, 0.5170599, 0.5038974, 0.5251191, 0.5035223, 0.5366312, 0.5041739, 0.5394096, 0.504912, 0.5421072, 0.5066994, 0.5547149, 0.5046682, 0.4267138, 0.5031031, 0.4227711, 0.5019245, 0.413328, 0.5164022, 0.488336, 0.5149337, 0.4955851, 0.509554, 0.4824717, 0.5082279, 0.4942164, 0.5187426, 0.4879328, 0.5164379, 0.4869206, 0.5150598, 0.486073, 0.5144666, 0.486767, 0.4816898, 0.4087069, 0.4831769, 0.4075997, 0.486125, 0.4055208, 0.4896842, 0.4038134, 0.5029179, 0.4145032, 0.5019817, 0.4183519, 0.4978346, 0.4230284, 0.4924857, 0.4240114, 0.4828047, 0.4224557, 0.4761223, 0.4028178, 0.4674823, 0.3365966, 0.4677913, 0.3460017, 0.4684197, 0.3564869, 0.4713822, 0.3798767, 0.4726705, 0.3875215, 0.4757224, 0.3948924, 0.4805283, 0.4102492, 0.4777321, 0.4076199, 0.4812747, 0.4206949, 0.5132515, 0.3757454, 0.507017, 0.3755827, 0.5030479, 0.3841878, 0.5026472, 0.3946272, 0.5015358, 0.4017434, 0.5008243, 0.4055899, 0.5009178, 0.4090554, 0.4967792, 0.516641, 0.4946846, 0.5132371, 0.4900263, 0.5033951, 0.4889768, 0.4692845, 0.519922, 0.5646161, 0.5199913, 0.5739249, 0.520507, 0.5745853, 0.5198451, 0.5839657, 0.5203378, 0.5904161, 0.5200631, 0.6027859, 0.5189255, 0.6137555, 0.5182833, 0.6155467, 0.5180128, 0.613212, 0.5178332, 0.6126211, 0.5173424, 0.5636449, 0.5171899, 0.5719082, 0.517426, 0.5739561, 0.5170581, 0.584278, 0.5170297, 0.5909278, 0.5158604, 0.601676, 0.5140186, 0.61231, 0.512535, 0.6136911, 0.5119427, 0.6104106, 0.5113777, 0.6086848, 0.515053, 0.5624907, 0.5144534, 0.5690028, 0.5144474, 0.5721607, 0.5141499, 0.5842991, 0.5137845, 0.5906478, 0.5115713, 0.5995639, 0.5084958, 0.608984, 0.5066925, 0.6091254, 0.5049607, 0.605094, 0.5046748, 0.602882, 0.5059224, 0.5564345, 0.5051639, 0.5586277, 0.5040839, 0.5612193, 0.5021514, 0.5773583, 0.5005604, 0.5817646, 0.4951779, 0.5868658, 0.4899964, 0.5862322, 0.4838168, 0.5814291, 0.5106152, 0.5060914, 0.5145648, 0.5033836, 0.5180723, 0.5029518, 0.4977378, 0.536455, 0.4969516, 0.5521116, 0.4994551, 0.5578467, 0.5009719, 0.56409, 0.5029796, 0.5680665, 0.5066799, 0.5721136, 0.5138705, 0.5774964, 0.5174018, 0.5781893, 0.5201749, 0.5782699, 0.5178756, 0.6150006, 0.5121168, 0.6128527, 0.5053954, 0.6083353, 0.4921273, 0.5931805, 0.4860788, 0.5848002, 0.4799634, 0.5748721, 0.472269, 0.5537615, 0.4686226, 0.5131179, 0.4717828, 0.4722627, 0.474404, 0.4602528, 0.4771299, 0.4480231, 0.47724, 0.5708655, 0.4678927, 0.5471236, 0.4633681, 0.5200491, 0.4626933, 0.506551, 0.4673991, 0.4668835, 0.4961079, 0.5555011, 0.4943676, 0.5554705, 0.4916897, 0.5547398, 0.4845776, 0.5538557, 0.4752581, 0.5470915, 0.4684889, 0.5416376, 0.464892, 0.5336301, 0.4608544, 0.524547, 0.4614931, 0.5215322, 0.4982217, 0.5548772, 0.4998609, 0.5539271, 0.5008414, 0.5526023, 0.501388, 0.5515242, 0.5016798, 0.5508222, 0.4675787, 0.4498692, 0.4780854, 0.4215903, 0.4704552, 0.4346183, 0.4741954, 0.4230984, 0.477508, 0.4192356, 0.4800066, 0.4138267, 0.4793486, 0.416976, 0.479012, 0.4131644, 0.5147436, 0.3322511, 0.507584, 0.3108811, 0.5068151, 0.2910326, 0.5180364, 0.4256849, 0.5096989, 0.4378752, 0.5068128, 0.4445255, 0.4950599, 0.4633572, 0.4826617, 0.473204, 0.4763348, 0.4739807, 0.4637858, 0.4598303, 0.4618456, 0.4500236, 0.4760758, 0.3736142, 0.4587519, 0.5088098, 0.4579455, 0.4583138, 0.4587081, 0.4596903, 0.4702653, 0.4561219, 0.4616376, 0.4408053, 0.4599606, 0.3709594, 0.4553112, 0.4456855, 0.4602065, 0.3638417, 0.4660645, 0.412439, 0.4858418, 0.4501743, 0.4868775, 0.44192, 0.4882661, 0.4324348, 0.4899012, 0.4245027, 0.5035301, 0.4822588, 0.4795345, 0.4153087, 0.4790106, 0.4156201, 0.4770628, 0.4169278, 0.4735687, 0.4193423, 0.4697802, 0.4234298, 0.4656978, 0.4280561, 0.4615904, 0.4311949, 0.455397, 0.4326431, 0.4556687, 0.4329096, 0.4590458, 0.4335019, 0.4998966, 0.4783734, 0.5000366, 0.4568147, 0.5006037, 0.4493872, 0.4998735, 0.4422899, 0.5063518, 0.5093892, 0.5102564, 0.515343, 0.5110633, 0.5234532, 0.5041771, 0.4892818, 0.5026866, 0.4825006, 0.512684, 0.4236919, 0.512358, 0.4318679, 0.5115027, 0.4478911, 0.5082281, 0.4622784, 0.5086091, 0.4663547, 0.5089096, 0.4701484, 0.508755, 0.4759906, 0.5085436, 0.4798135, 0.5217843, 0.3549003, 0.5143098, 0.3542351, 0.5070906, 0.3534963, 0.4998181, 0.352935, 0.4933008, 0.3530325, 0.4873353, 0.3540837, 0.4810993, 0.3562925, 0.4748689, 0.3626029, 0.4695394, 0.3690417, 0.4651482, 0.3750585, 0.4627835, 0.3839293, 0.4594985, 0.407294, 0.5029782, 0.4866293, 0.4982907, 0.5956357, 0.4982493, 0.5983401, 0.4988253, 0.6013231, 0.5002525, 0.6021789, 0.5031329, 0.6032098, 0.507064, 0.5950426, 0.5093192, 0.5881572, 0.5101092, 0.5816128, 0.510219, 0.5753757, 0.51126, 0.5692593, 0.5115129, 0.5658694, 0.5114052, 0.5603207, 0.5106214, 0.554234, 0.5103188, 0.5369202, 0.5092715, 0.5294624, 0.5064744, 0.4920988, 0.5117809, 0.4865722, 0.4584624, 0.4972928, 0.458646, 0.4956041, 0.4908737, 0.5831116, 0.5175921, 0.6125662, 0.5108593, 0.6083352, 0.5250308, 0.61384, 0.504074, 0.6018544, 0.4974171, 0.5931754, 0.5022328, 0.5736619, 0.4592875, 0.3898748, 0.4577621, 0.3859263, 0.4569344, 0.3822613, 0.4795492, 0.4116158, 0.477513, 0.4102042, 0.4740301, 0.408545, 0.4705363, 0.4080636, 0.4668621, 0.4057615, 0.463155, 0.4013276, 0.4610114, 0.3940565, 0.4586826, 0.4203202, 0.4563252, 0.4191327, 0.4559185, 0.4183513, 0.4585056, 0.41807, 0.4791358, 0.4144434, 0.4772595, 0.4148124, 0.4733699, 0.4158501, 0.4697826, 0.4178571, 0.4655934, 0.4203438, 0.4614812, 0.421629, 0.550155, 0.5864494, 0.5555855, 0.585839, 0.5587595, 0.5770537, 0.5528469, 0.5798615, 0.5285012, 0.613724, 0.5299542, 0.6154676, 0.5357726, 0.6135499, 0.5338764, 0.6121536, 0.544542, 0.5814005, 0.5470647, 0.5755531, 0.561125, 0.5746014, 0.5634399, 0.5705881, 0.5693491, 0.5471877, 0.5665024, 0.5538356, 0.5276036, 0.6027124, 0.5314593, 0.6015468, 0.538974, 0.6087697, 0.5411104, 0.6089177, 0.5466244, 0.6019052, 0.5435759, 0.6029097, 0.542451, 0.5770825, 0.5451574, 0.5710321, 0.5569031, 0.5641462, 0.5629444, 0.5587755, 0.5647699, 0.5473589, 0.5576792, 0.5542583, 0.5718971, 0.5339634, 0.56894, 0.5420091, 0.5262707, 0.5904035, 0.529536, 0.590777, 0.5353019, 0.5993932, 0.5394471, 0.5948031, 0.5472902, 0.5941493, 0.5421094, 0.5874154, 0.5501369, 0.5624651, 0.5560431, 0.5180019, 0.5498654, 0.5264613, 0.5513728, 0.5490538, 0.5582258, 0.5439153, 0.5711529, 0.5408333, 0.5725175, 0.5359246, 0.5757945, 0.5220135, 0.5753764, 0.5249915, 0.5325657, 0.5904033, 0.5364577, 0.5879197, 0.5513321, 0.5551234, 0.5427944, 0.5641233, 0.5408944, 0.5681366, 0.5418383, 0.5735717, 0.5440595, 0.5678531, 0.5475982, 0.5609929, 0.5486364, 0.5557922, 0.5258354, 0.5783552, 0.5262329, 0.5837155, 0.5290784, 0.5841749, 0.5287567, 0.5783517, 0.5488631, 0.5511464, 0.5789678, 0.4981325, 0.5831059, 0.4595013, 0.5819484, 0.4571849, 0.5774048, 0.5027109, 0.5313854, 0.5772744, 0.5318023, 0.5842444, 0.5352913, 0.5814552, 0.5350071, 0.5753455, 0.5383875, 0.5782162, 0.538072, 0.5723709, 0.5365027, 0.5589972, 0.5391138, 0.5612777, 0.5400496, 0.5593226, 0.5383171, 0.557433, 0.5458914, 0.5596992, 0.5439631, 0.5580556, 0.5476027, 0.5295416, 0.5520265, 0.5040922, 0.548088, 0.5139989, 0.5249364, 0.5740052, 0.5254188, 0.5746502, 0.5283582, 0.5739794, 0.5277777, 0.5719286, 0.5468661, 0.5558749, 0.54447, 0.5552415, 0.5463123, 0.5173135, 0.5443432, 0.5005407, 0.5476607, 0.4906744, 0.5466607, 0.4466232, 0.5467759, 0.4551272, 0.5522254, 0.4595538, 0.5515512, 0.4493041, 0.5304875, 0.569167, 0.5312005, 0.5722535, 0.5341212, 0.5691773, 0.532914, 0.5659241, 0.5365961, 0.5649139, 0.5350212, 0.5618789, 0.534013, 0.5567008, 0.5360865, 0.5554043, 0.5421149, 0.5562661, 0.5407335, 0.5544304, 0.5448264, 0.5525335, 0.547337, 0.5521595, 0.5453837, 0.533152, 0.5434548, 0.5369215, 0.5433137, 0.5047385, 0.5238242, 0.5646486, 0.5264161, 0.5636928, 0.5330532, 0.5549616, 0.5347995, 0.5539833, 0.5426409, 0.5543458, 0.5406587, 0.5529945, 0.5424005, 0.5270609, 0.5443583, 0.5215936, 0.5417529, 0.5096997, 0.5390933, 0.4691096, 0.539251, 0.4503383, 0.5363056, 0.4447129, 0.5365272, 0.4608256, 0.5513306, 0.4416264, 0.5476124, 0.4399113, 0.5719053, 0.4570442, 0.568198, 0.4453559, 0.5646526, 0.4488976, 0.5679028, 0.4611005, 0.521993, 0.5566859, 0.5244797, 0.5554737, 0.5287321, 0.5626175, 0.5311024, 0.5603361, 0.53287, 0.558508, 0.5384243, 0.5526643, 0.5425289, 0.5522534, 0.54131, 0.5401992, 0.5385755, 0.5426058, 0.5405939, 0.5517637, 0.5391535, 0.4438634, 0.5396044, 0.4370257, 0.5365466, 0.4313212, 0.5362133, 0.4376996, 0.5512851, 0.4323905, 0.5482239, 0.4314796, 0.5555002, 0.4425173, 0.5544521, 0.4330523, 0.5646781, 0.4374572, 0.5621801, 0.4406781, 0.5266299, 0.5546164, 0.5286371, 0.5543823, 0.5309681, 0.5550866, 0.5381925, 0.5523217, 0.5393075, 0.5519388, 0.5402253, 0.533006, 0.5381372, 0.5371473, 0.5404686, 0.4328559, 0.5431296, 0.4426354, 0.5437801, 0.437336, 0.5380244, 0.5513797, 0.5386399, 0.5511523, 0.5364851, 0.5442788, 0.5305248, 0.431973, 0.5311468, 0.448079, 0.5335996, 0.4537296, 0.5333371, 0.4380055, 0.5448788, 0.4300697, 0.5420836, 0.4275252, 0.5766838, 0.4364968, 0.5728074, 0.4299983, 0.5720876, 0.4355303, 0.5763617, 0.4438843, 0.5378723, 0.5505347, 0.5352421, 0.5456927, 0.535939, 0.539752, 0.5278691, 0.4197471, 0.5256103, 0.4176084, 0.5255131, 0.4257425, 0.5283159, 0.4280881, 0.5467625, 0.4081209, 0.5482048, 0.4241937, 0.5505804, 0.4245322, 0.5498516, 0.4070755, 0.5532408, 0.42508, 0.552718, 0.4070833, 0.5684969, 0.4239741, 0.5678176, 0.42874, 0.5722126, 0.4135711, 0.5726755, 0.4187948, 0.5766792, 0.4213614, 0.5758353, 0.4133946, 0.5330865, 0.542374, 0.5406883, 0.4856332, 0.539703, 0.4770868, 0.5394912, 0.4774732, 0.5399733, 0.4827524, 0.5384308, 0.4826052, 0.5390533, 0.4785078, 0.5373923, 0.4743933, 0.5371158, 0.4794529, 0.5585074, 0.4101789, 0.5581625, 0.4242721, 0.560077, 0.4230132, 0.5601577, 0.4111303, 0.564954, 0.4200115, 0.564243, 0.4223852, 0.5708705, 0.4045151, 0.5717584, 0.4089663, 0.5751212, 0.4066895, 0.5743258, 0.4004583, 0.5359686, 0.5188051, 0.5324542, 0.5155832, 0.5314873, 0.5237381, 0.5346503, 0.5260319, 0.5394176, 0.4897542, 0.5394232, 0.4944267, 0.5320834, 0.4620725, 0.5293639, 0.458559, 0.5294544, 0.4646358, 0.5322025, 0.4673937, 0.5259886, 0.4409253, 0.5289161, 0.44399, 0.5297799, 0.413969, 0.5327118, 0.423479, 0.5327243, 0.410917, 0.5316375, 0.3994854, 0.5454112, 0.4234415, 0.5441979, 0.4092887, 0.5421423, 0.4115349, 0.5427412, 0.4212494, 0.5675179, 0.4062402, 0.5680888, 0.4094529, 0.5734833, 0.3945612, 0.5692327, 0.4001524, 0.5372431, 0.4937085, 0.5356342, 0.4924423, 0.5340587, 0.4945082, 0.5376001, 0.4985333, 0.5357019, 0.4900873, 0.5359281, 0.4880053, 0.5340785, 0.4850729, 0.5296431, 0.4724408, 0.5324802, 0.4742185, 0.5288448, 0.3943368, 0.5277406, 0.4105523, 0.5662022, 0.4036972, 0.5258351, 0.5123305, 0.5293579, 0.5132903, 0.528641, 0.5035191, 0.5252038, 0.5030673, 0.5286686, 0.4786588, 0.5312303, 0.479131, 0.5261282, 0.4561342, 0.5260507, 0.4631245, 0.5405731, 0.3851848, 0.5372721, 0.3759921, 0.5638822, 0.407097, 0.564992, 0.4085593, 0.5666953, 0.3956604, 0.5641618, 0.4006773, 0.52752, 0.5267792, 0.5247973, 0.5368458, 0.5270078, 0.5366862, 0.5295583, 0.5276951, 0.5260231, 0.5211655, 0.5286668, 0.5222684, 0.5289451, 0.4828847, 0.5266502, 0.4862093, 0.5262057, 0.4717633, 0.5265934, 0.3921475, 0.525956, 0.4074826, 0.5398918, 0.3956618, 0.5620208, 0.405438, 0.525631, 0.4783491, 0.5310685, 0.3760531, 0.543258, 0.393212, 0.5446581, 0.3831298, 0.5410922, 0.4025021, 0.543871, 0.3991719, 0.5699034, 0.3883855, 0.5251441, 0.5276486, 0.5254665, 0.4913158, 0.5263022, 0.4898455, 0.5259985, 0.4883505, 0.5250393, 0.4893612, 0.5257013, 0.4870183, 0.5271342, 0.4835674, 0.524497, 0.4838107, 0.5233449, 0.4879927, 0.5431939, 0.3723191, 0.5495997, 0.381724, 0.5473205, 0.3909471, 0.5416411, 0.406121, 0.5444934, 0.4034269, 0.5400963, 0.4151862, 0.539862, 0.4174325, 0.541086, 0.4186783, 0.540774, 0.413666, 0.5635812, 0.3914773, 0.5660501, 0.3830538, 0.5619761, 0.3776732, 0.5588365, 0.3884727, 0.5243092, 0.4965218, 0.5233352, 0.492382, 0.5221278, 0.5368522, 0.5277541, 0.4957747, 0.5280541, 0.49192, 0.5313609, 0.4940116, 0.5227656, 0.4903239, 0.5489181, 0.3690597, 0.5476882, 0.3965708, 0.5360892, 0.4149359, 0.538241, 0.4148898, 0.5613752, 0.4094034, 0.5601146, 0.4082556, 0.5611107, 0.3977669, 0.5588834, 0.40301, 0.5557498, 0.3790313, 0.5529415, 0.3892972, 0.5518373, 0.3953394, 0.5475575, 0.4018274, 0.541853, 0.4094443, 0.5441121, 0.4066617, 0.5563182, 0.3955903, 0.5548458, 0.401416, 0.5506461, 0.4008966, 0.5469319, 0.4051024, 0.5559503, 0.4085247, 0.5568658, 0.4061441, 0.5712565, 0.3248812, 0.5646648, 0.3137476, 0.5635974, 0.3269503, 0.5704071, 0.3366934, 0.5501015, 0.4042995, 0.5532446, 0.4044772, 0.5575014, 0.3051469, 0.5565349, 0.3204819, 0.5498636, 0.2987233, 0.5426151, 0.3127264, 0.5493563, 0.3164421, 0.543493, 0.2940484, 0.5361611, 0.2911223, 0.5286502, 0.2897139, 0.5286111, 0.3100734, 0.535626, 0.3110899, 0.5354849, 0.3329006, 0.5367749, 0.3540221, 0.5437511, 0.3536135, 0.5424639, 0.3339317, 0.5503391, 0.3538301, 0.5491936, 0.3351072, 0.5553176, 0.3372701, 0.5560855, 0.3548355, 0.5617746, 0.3570887, 0.5621883, 0.3419062, 0.5681202, 0.3634121, 0.5691422, 0.3498532, 0.5744593, 0.3572085, 0.5734909, 0.3698592, 0.5766734, 0.3759404, 0.5776547, 0.3667778, 0.5397283, 0.5823174, 0.5375824, 0.4862982, 0.5362434, 0.4829016, 0.537752, 0.4896439, 0.5329767, 0.430925, 0.5344603, 0.4665406, 0.5343286, 0.4704378, 0.5375512, 0.4717314, 0.5347168, 0.4763054, 0.533744, 0.4801357, 0.532106, 0.4827065, 0.5595948, 0.4739665, 0.5533608, 0.4699152, 0.5578752, 0.4624499, 0.5565332, 0.4508398, 0.555797, 0.424888, 0.5597445, 0.4310549, 0.5573573, 0.4325854, 0.5588498, 0.4420931, 0.5703204, 0.5281214, 0.5659875, 0.5345811, 0.5736385, 0.5205466, 0.5747253, 0.5072823, 0.5708818, 0.5138186, 0.5798252, 0.4511784, 0.5781572, 0.4609022, 0.5669605, 0.5209817, 0.5579575, 0.5843741, 0.5650615, 0.4748314, 0.574948, 0.4679338, 0.570428, 0.4732925, 0.5480167, 0.4638438, 0.5371903, 0.4686273, 0.5341378, 0.4624541, 0.5261377, 0.4506657, 0.5292839, 0.453405, 0.5619371, 0.4286848, 0.5668971, 0.4329819, 0.5634984, 0.4254736, 0.5708497, 0.4406603, 0.5633011, 0.4629514, 0.578222, 0.4022973, 0.5763182, 0.3940251, 0.5746107, 0.3868785, 0.5715196, 0.380744, 0.5672848, 0.3745866, 0.5618456, 0.3700481, 0.5557556, 0.3685603, 0.5287197, 0.3324265, 0.5299526, 0.3545161, 0.5405277, 0.5176077, 0.5387474, 0.5255486, 0.5318743, 0.4572307, 0.5354875, 0.5338392, 0.5372584, 0.5308462, 0.5336704, 0.5297548, 0.530713, 0.5398543, 0.5296853, 0.5372654, 0.5357482, 0.4215894, 0.538304, 0.4269875, 0.5401151, 0.4231007, 0.5382764, 0.4196799, 0.5303711, 0.4238257, 0.5426009, 0.4498205, 0.5431009, 0.4571821, 0.5395764, 0.4148563, 0.5834417, 0.4609509, 0.5846504, 0.4478751, 0.5840453, 0.4468893, 0.5428923, 0.478718, 0.532356, 0.4992159, 0.5280179, 0.4869336, 0.5304285, 0.4867563, 0.5637106, 0.4177105, 0.5627658, 0.4194372, 0.5625898, 0.4110287, 0.5615259, 0.4214101, 0.5617488, 0.4123843, 0.5765562, 0.3371591, 0.5754198, 0.3466121, 0.5636509, 0.4123888, 0.5652581, 0.4110667, 0.5628317, 0.4135671, 0.5312036, 0.6149903, 0.531932, 0.6131843, 0.5371228, 0.6127535, 0.542837, 0.6081753, 0.5486658, 0.6010878, 0.5439058, 0.6049637, 0.5495526, 0.5981852, 0.5367565, 0.5096841, 0.5377658, 0.6103479, 0.5611517, 0.4505731, 0.5649062, 0.5657865, 0.5759428, 0.5145612, 0.5751426, 0.4508975, 0.5690358, 0.4167303, 0.5689657, 0.4132426, 0.5657196, 0.4156289, 0.565798, 0.4131947, 0.5638857, 0.4152, 0.5642308, 0.4139138, 0.563158, 0.4145705, 0.5780187, 0.5094242, 0.5802804, 0.4419051, 0.5657991, 0.4177245, 0.5637816, 0.4163691, 0.5691471, 0.4202103, 0.5732906, 0.4243901, 0.5771165, 0.4290693, 0.5324523, 0.5063815, 0.5398077, 0.4828636, 0.5390486, 0.4870062, 0.5827327, 0.445164, 0.5795554, 0.496473, 0.578302, 0.5078796, 0.5792743, 0.3584121, 0.5801144, 0.3496723, 0.5845098, 0.4490735, 0.5836676, 0.4626383, 0.5795454, 0.4940196, 0.5658286, 0.5609515, 0.5324402, 0.612609, 0.5385247, 0.6086425, 0.5444301, 0.6028069, 0.55005, 0.5955576, 0.5451736, 0.6018941, 0.5510282, 0.5932022, 0.5390758, 0.6083665, 0.5327618, 0.612588, 0.5558491, 0.586293, 0.5550768, 0.5903852, 0.5615698, 0.5725192, 0.5566036, 0.5831088, 0.5519897, 0.5944673, 0.5538323, 0.5928596, 0.5597582, 0.5811321, 0.5606762, 0.576721, 0.5787582, 0.384868, 0.5793825, 0.4117688, 0.5804017, 0.3784744, 0.5804146, 0.3950736, 0.5818647, 0.4083439, 0.5831772, 0.4056332, 0.5822558, 0.3908356, 0.5822518, 0.3717829, 0.5835926, 0.3868541, 0.5845874, 0.4032173, 0.5836773, 0.364614, 0.5853587, 0.383175, 0.5858078, 0.4016901, 0.5848353, 0.4340821, 0.5843535, 0.4338335, 0.5829941, 0.4334987, 0.5848421, 0.4347096, 0.5852298, 0.4191881, 0.5851035, 0.4194892, 0.5802606, 0.4227118, 0.5801997, 0.4322497, 0.5827216, 0.4214182, 0.584189, 0.4202726, 0.5634772, 0.415421, 0.5197359, 0.5369997, 0.4583778, 0.5068961, 0.5777161, 0.5075548, 0.502626, 0.4118313, 0.5033606, 0.4093405, 0.5048746, 0.4071292, 0.5067179, 0.4023493, 0.5063164, 0.3860551, 0.5106424, 0.3849634, 0.5151739, 0.3841058, 0.522168, 0.3834235, 0.5295941, 0.3843753, 0.533851, 0.3852867, 0.5377382, 0.3869424, 0.536432, 0.4032672, 0.5383842, 0.4077689, 0.5396618, 0.409783, 0.5406466, 0.4122177, 0.5503139, 0.4210043, 0.5477709, 0.420538, 0.5528767, 0.4219434, 0.5595254, 0.4210685, 0.5574946, 0.421545, 0.5432421, 0.4196312, 0.5456077, 0.4204268, 0.5412104, 0.4176269, 0.5402436, 0.4166548, 0.5552586, 0.4218442, 0.561046, 0.4199886, 0.5624038, 0.4185614, 0.5632523, 0.4170595, 0.4956585, 0.4200877, 0.4931162, 0.4204958, 0.4905093, 0.4213853, 0.4855783, 0.420877, 0.4839092, 0.4203625, 0.4980131, 0.420026, 0.5001489, 0.4192584, 0.5026253, 0.4163311, 0.5017091, 0.4172886, 0.487838, 0.4212306, 0.4822176, 0.4192647, 0.4807136, 0.4178238, 0.479906, 0.4163157, 0.4798581, 0.4146761, 0.5635102, 0.4160537, 0.5087829, 0.4895828, 0.5334318, 0.4898997, 0.5027537, 0.5494763, 0.5029608, 0.5521043, 0.5033947, 0.5446413, 0.5054271, 0.5542566, 0.5059005, 0.542233, 0.5078379, 0.5552969, 0.5172222, 0.53539, 0.5156815, 0.5542045, 0.5140924, 0.5538771, 0.5144562, 0.5358385, 0.5182376, 0.5357537, 0.5181753, 0.5548515, 0.5200287, 0.5359385, 0.5198354, 0.5552152, 0.5103521, 0.5547959, 0.5087439, 0.5392429, 0.5116839, 0.5370713, 0.5122734, 0.5538267, 0.5026819, 0.5507396, 0.5373921, 0.5525023, 0.5343554, 0.5550443, 0.5351055, 0.5449135, 0.537469, 0.5498264, 0.5321068, 0.5556412, 0.5329322, 0.5424261, 0.5240263, 0.5356678, 0.5264354, 0.5358913, 0.5255901, 0.5541554, 0.5240576, 0.5544809, 0.5216042, 0.5550348, 0.521844, 0.5359309, 0.5295618, 0.5550468, 0.5274788, 0.5539902, 0.5288002, 0.5373145, 0.5298833, 0.5396045, 0.5376389, 0.5513722, 0.5527357, 0.5235351, 0.5497284, 0.5100029, 0.5460128, 0.496176, 0.541998, 0.4836728, 0.5395126, 0.473661, 0.536607, 0.4650624, 0.5338036, 0.4582247, 0.531576, 0.4525116, 0.52891, 0.4483292, 0.5260049, 0.4453711, 0.5218478, 0.4438469, 0.5179533, 0.4452924, 0.5141438, 0.448189, 0.5111865, 0.4523258, 0.5086368, 0.4579735, 0.5062292, 0.464823, 0.503338, 0.4733628, 0.5008594, 0.4832344, 0.4965645, 0.4954289, 0.492667, 0.5092871, 0.489552, 0.5226968, 0.4872328, 0.5464215, 0.4883528, 0.554508, 0.4900365, 0.5635618, 0.4948212, 0.5787479, 0.497712, 0.5850506, 0.5010067, 0.5922208, 0.5050531, 0.600437, 0.5100561, 0.6056031, 0.5149924, 0.6082311, 0.5195129, 0.6091244, 0.5240074, 0.6092457, 0.5283002, 0.6090651, 0.5331287, 0.6080878, 0.5376601, 0.6053683, 0.5420576, 0.6001285, 0.5451907, 0.5919247, 0.5475647, 0.5847812, 0.5499584, 0.578474, 0.5537446, 0.5636961, 0.5547469, 0.554939, 0.5553046, 0.5471271, 0.5610136, 0.5070724, 0.5543861, 0.4947012, 0.5486047, 0.4826158, 0.5434361, 0.4720149, 0.5394215, 0.4633727, 0.536596, 0.4556239, 0.5337607, 0.4488069, 0.5310119, 0.4433226, 0.5290034, 0.4389937, 0.5264088, 0.4362451, 0.5221402, 0.4349245, 0.4806897, 0.5062191, 0.4883043, 0.4940712, 0.49435, 0.4820366, 0.4996236, 0.4716062, 0.5034463, 0.4630841, 0.5065891, 0.4553649, 0.5092215, 0.4486717, 0.5115334, 0.4431579, 0.5144941, 0.4388807, 0.5181693, 0.4361917, 0.4791052, 0.5253577, 0.4803289, 0.5389416, 0.480542, 0.5509042, 0.4823586, 0.5618778, 0.4892971, 0.5787134, 0.4933597, 0.5866561, 0.4971023, 0.5946348, 0.5020332, 0.6029698, 0.507691, 0.6092846, 0.5136751, 0.6134908, 0.5190343, 0.6151625, 0.5242681, 0.615406, 0.5292386, 0.6151244, 0.5348917, 0.6133552, 0.540104, 0.6090779, 0.5451223, 0.6026797, 0.5493057, 0.5942067, 0.5525607, 0.5863084, 0.5553161, 0.5784409, 0.5596144, 0.5620501, 0.5610073, 0.5512679, 0.561103, 0.5395175, 0.5620305, 0.5266752, 0.5718309, 0.4859196, 0.5757749, 0.4801419, 0.5818645, 0.4734373, 0.5821124, 0.4729412, 0.5801178, 0.4720601, 0.5817, 0.4727285, 0.5673904, 0.4894536, 0.4654961, 0.4791279, 0.4696864, 0.4849466, 0.4573932, 0.4715013, 0.4606809, 0.4709173, 0.4603453, 0.4717718, 0.4630397, 0.4722548, 0.4744059, 0.4885596, 0.561269, 0.4883101, 0.4809552, 0.4875771, 0.5485533, 0.4732753, 0.5435637, 0.4648915, 0.5547543, 0.4816715, 0.5365488, 0.45027, 0.5393784, 0.4571332, 0.5339056, 0.444122, 0.5311126, 0.438176, 0.5292256, 0.4339243, 0.5264324, 0.4309646, 0.5223045, 0.4302774, 0.4996813, 0.4645074, 0.4944561, 0.4727449, 0.5038351, 0.4568586, 0.4878777, 0.481077, 0.5119643, 0.4380915, 0.5092527, 0.4439438, 0.5148541, 0.4338225, 0.5183828, 0.4309062, 0.5068038, 0.450078, 0.4695033, 0.4974875, 0.4640847, 0.4922612, 0.4729261, 0.5024095, 0.4908738, 0.5374873, 0.4874466, 0.5353615, 0.4832028, 0.5313781, 0.5758902, 0.493218, 0.5719799, 0.4983264, 0.5787039, 0.4889306, 0.5680061, 0.5032031, 0.5487326, 0.5407127, 0.5514817, 0.5380033, 0.5548095, 0.5364524, 0.5582505, 0.5326347, 0.5809835, 0.4832897, 0.5805432, 0.4843859, 0.5803602, 0.4860713, 0.4604314, 0.4877635, 0.4580297, 0.4849604, 0.459071, 0.4833651, 0.4620646, 0.4822244, 0.4936857, 0.5402423, 0.5445773, 0.5460666, 0.5469774, 0.5434172, 0.5390962, 0.5475295, 0.5411624, 0.5468844, 0.4991697, 0.54641, 0.5006048, 0.5471017, 0.4969417, 0.5454779, 0.4952953, 0.5430259, 0.4711153, 0.548646, 0.4706445, 0.5538214, 0.4723067, 0.5594782, 0.476024, 0.5645362, 0.4805974, 0.5683532, 0.4854551, 0.5709531, 0.4886703, 0.5725298, 0.4921689, 0.5716504, 0.4955575, 0.5689302, 0.4975197, 0.5656396, 0.4984719, 0.5634059, 0.4997057, 0.5604833, 0.501426, 0.5573854, 0.5024849, 0.5557006, 0.503545, 0.5532203, 0.5041239, 0.5520828, 0.5039898, 0.5527912, 0.5026355, 0.5473312, 0.5025572, 0.5481459, 0.5014233, 0.5478001, 0.5693064, 0.5487654, 0.5684208, 0.5538142, 0.5667068, 0.559325, 0.5644281, 0.5644251, 0.5615303, 0.5682683, 0.5579739, 0.5708986, 0.5555829, 0.5725013, 0.5521848, 0.5716137, 0.5489581, 0.568872, 0.5466893, 0.5657113, 0.5456592, 0.5634117, 0.5440918, 0.5604779, 0.541908, 0.5576094, 0.5395451, 0.5557418, 0.5370732, 0.5536554, 0.5363716, 0.5525007, 0.5362676, 0.5533436, 0.5365351, 0.5476814, 0.5368583, 0.5484779, 0.5379981, 0.5481943 };
	bool showRebecca= false;
	private Vector2[] fixedUVs = new Vector2[1347];

	[Tooltip("Index of the player, tracked by this component. 0 means the 1st player, 1 - the 2nd one, 2 - the 3rd one, etc.")]
	public int playerIndex = 0;
	
	[Tooltip("Whether to poll the HD-face model data or not.")]
	public bool getFaceModelData = false;

	[Tooltip("Whether to display the face rectangle over the color camera feed.")]
	public bool displayFaceRect = false;
	
	[Tooltip("Time tolerance in seconds, when the face may not to be tracked, without considering it lost.")]
	public float faceTrackingTolerance = 0.5f;
	
	[Tooltip("Game object that will be used to display the HD-face model mesh in the scene.")]
	public GameObject faceModelMesh = null;
	
	[Tooltip("Whether the HD-face model mesh should be mirrored or not.")]
	private bool mirroredModelMesh = true;

	//[Tooltip("Whether to skip the continuous updates of the HD-face model mesh, or not.")]
	//public bool dontUpdateModelMesh = false;

	[Tooltip("Whether to pause the updates of the HD-face model mesh.")]
	public bool pauseModelMeshUpdates = false;

	public enum TextureType : int { None, ColorMap, FaceRectangle }
	[Tooltip("How the HD-face model mesh should be textured.")]
	public TextureType texturedModelMesh = TextureType.ColorMap;

	[Tooltip("Whether to move the face model mesh, to be the same as user's head position.")]
	public bool moveModelMesh = false;

	[Tooltip("Camera used to overlay face mesh over the color background.")]
	public Camera foregroundCamera;

	[Tooltip("Scale factor for the face mesh.")]
	[Range(0.1f, 2.0f)]
	public float modelMeshScale = 1f;

	[Tooltip("Vertical offset of the mesh above the head (in meters).")]
	[Range(-0.5f, 0.5f)]
	public float verticalMeshOffset = 0f;

	[Tooltip("UI-Text to display the FT-manager debug messages.")]
	public UnityEngine.UI.Text debugText;

//	// nose and head transforms
//	public Transform noseTransform;
//	public Transform headTransform;
//	public UnityEngine.UI.Text debugText2;


	// Is currently tracking user's face
	private bool isTrackingFace = false;
	private float lastFaceTrackedTime = 0f;
	
	// Skeleton ID of the tracked face
	//private long faceTrackingID = 0;
	
	// Animation units
	private Dictionary<KinectInterop.FaceShapeAnimations, float> dictAU = new Dictionary<KinectInterop.FaceShapeAnimations, float>();
	private bool bGotAU = false;

	// Shape units
	private Dictionary<KinectInterop.FaceShapeDeformations, float> dictSU = new Dictionary<KinectInterop.FaceShapeDeformations, float>();
	private bool bGotSU = false;

	// whether the face model mesh was initialized
	private bool bFaceModelMeshInited = false;
	private Vector3[] vMeshVertices = null;

	// Vertices, UV and triangles of the face model
	private Vector3[] avModelVertices = null;
	private Vector2[] avModelUV = null;
	private bool bGotModelVertices = false;
	//private bool bGotModelVerticesFromDC = false;
	private bool bGotModelUV = false;

	private int[] avModelTriangles = null;
	private bool bGotModelTriangles = false;
	private bool bGotModelTrianglesFromDC = false;

	// Head position and rotation
	private Vector3 headPos = Vector3.zero;
	private bool bGotHeadPos = false;

	private Quaternion headRot = Quaternion.identity;
	private bool bGotHeadRot = false;

	// offset vector from head to face center
	private Vector3 faceHeadOffset = Vector3.zero;
	
	// Tracked face rectangle
	private Rect faceRect = new Rect();
	//private bool bGotFaceRect;

	// primary user ID, as reported by KinectManager
	private long primaryUserID = 0;
	private long lastUserID = 0;

	// primary sensor data structure
	private KinectInterop.SensorData sensorData = null;
	
	// Bool to keep track of whether face-tracking system has been initialized
	private bool isFacetrackingInitialized = false;
	private bool wasFacetrackingActive = false;
	
	// The single instance of FacetrackingManager
	private static FacetrackingWithUVs instance;

	// update times
	private float facePosUpdateTime = 0f;
	private float faceMeshUpdateTime = 0f;

	// used when dontUpdateModelMesh is true
	//private bool faceMeshGotOnce = false;

	// whether UpdateFaceModelMesh() is running
	private bool updateFaceMeshStarted = false;

	private Material faceMeshMaterial = null;
	private RenderTexture faceMeshTexture = null;
	private Vector3 nosePos = Vector3.zero;

	/// <summary>
	/// Gets the single FacetrackingManager instance.
	/// </summary>
	/// <value>The FacetrackingManager instance.</value>
    public static FacetrackingWithUVs Instance
    {
        get
        {
            return instance;
        }
    }
	
	/// <summary>
	/// Determines the facetracking system was successfully initialized, false otherwise.
	/// </summary>
	/// <returns><c>true</c> if the facetracking system was successfully initialized; otherwise, <c>false</c>.</returns>
	public bool IsFaceTrackingInitialized()
	{
		return isFacetrackingInitialized;
	}
	
	/// <summary>
	/// Determines whether this the sensor is currently tracking a face.
	/// </summary>
	/// <returns><c>true</c> if the sensor is tracking a face; otherwise, <c>false</c>.</returns>
	public bool IsTrackingFace()
	{
		return isTrackingFace;
	}

	/// <summary>
	/// Gets the current user ID, or 0 if no user is currently tracked.
	/// </summary>
	/// <returns>The face tracking I.</returns>
	public long GetFaceTrackingID()
	{
		return isTrackingFace ? primaryUserID : 0;
	}
	
	/// <summary>
	/// Determines whether the sensor is currently tracking the face of the specified user.
	/// </summary>
	/// <returns><c>true</c> if the sensor is currently tracking the face of the specified user; otherwise, <c>false</c>.</returns>
	/// <param name="userId">User ID</param>
	public bool IsTrackingFace(long userId)
	{
		if (userId != 0 && userId == primaryUserID) 
		{
			return isTrackingFace;
		}

		if(sensorData != null && sensorData.sensorInterface != null)
		{
			return sensorData.sensorInterface.IsFaceTracked(userId);
		}

		return false;
	}

	/// <summary>
	/// Gets the last face position & rotation update time, in seconds since game start.
	/// </summary>
	/// <returns>The last face position & rotation update time.</returns>
	public float GetFacePosUpdateTime()
	{
		return facePosUpdateTime;
	}

	/// <summary>
	/// Gets the last face mesh update time, in seconds since game start.
	/// </summary>
	/// <returns>The last face mesh update time.</returns>
	public float GetFaceMeshUpdateTime()
	{
		return faceMeshUpdateTime;
	}
	
	/// <summary>
	/// Gets the head position of the currently tracked user.
	/// </summary>
	/// <returns>The head position.</returns>
	/// <param name="bMirroredMovement">If set to <c>true</c> returns mirorred head position.</param>
	public Vector3 GetHeadPosition(bool bMirroredMovement)
	{
		Vector3 vHeadPos = headPos; // bGotHeadPos ? headPos : Vector3.zero;

		if(!bMirroredMovement)
		{
			vHeadPos.z = -vHeadPos.z;
		}
		
		return vHeadPos;
	}
	
	/// <summary>
	/// Gets the head position of the specified user.
	/// </summary>
	/// <returns>The head position.</returns>
	/// <param name="userId">User ID</param>
	/// <param name="bMirroredMovement">If set to <c>true</c> returns mirorred head position.</param>
	public Vector3 GetHeadPosition(long userId, bool bMirroredMovement)
	{
		if (userId != 0 && userId == primaryUserID) 
		{
			return GetHeadPosition(bMirroredMovement);
		}

		Vector3 vHeadPos = Vector3.zero;
		bool bGotPosition = sensorData.sensorInterface.GetHeadPosition(userId, ref vHeadPos);

		if(bGotPosition)
		{
			if(!bMirroredMovement)
			{
				vHeadPos.z = -vHeadPos.z;
			}
			
			return vHeadPos;
		}

		return Vector3.zero;
	}
	
	/// <summary>
	/// Gets the head rotation of the currently tracked user.
	/// </summary>
	/// <returns>The head rotation.</returns>
	/// <param name="bMirroredMovement">If set to <c>true</c> returns mirorred head rotation.</param>
	public Quaternion GetHeadRotation(bool bMirroredMovement)
	{
		Vector3 rotAngles = headRot.eulerAngles; // bGotHeadRot ? headRot.eulerAngles : Vector3.zero;

		if(bMirroredMovement)
		{
			rotAngles.x = -rotAngles.x;
			rotAngles.z = -rotAngles.z;
		}
		else
		{
			rotAngles.x = -rotAngles.x;
			rotAngles.y = -rotAngles.y;
		}
		
		return Quaternion.Euler(rotAngles);
	}
	
	/// <summary>
	/// Gets the head rotation of the specified user.
	/// </summary>
	/// <returns>The head rotation.</returns>
	/// <param name="userId">User ID</param>
	/// <param name="bMirroredMovement">If set to <c>true</c> returns mirorred head rotation.</param>
	public Quaternion GetHeadRotation(long userId, bool bMirroredMovement)
	{
		if (userId != 0 && userId == primaryUserID) 
		{
			return GetHeadRotation(bMirroredMovement);
		}

		Quaternion vHeadRot = Quaternion.identity;
		bool bGotRotation = sensorData.sensorInterface.GetHeadRotation(userId, ref vHeadRot);

		if(bGotRotation)
		{
			Vector3 rotAngles = vHeadRot.eulerAngles;
			
			if(bMirroredMovement)
			{
				rotAngles.x = -rotAngles.x;
				rotAngles.z = -rotAngles.z;
			}
			else
			{
				rotAngles.x = -rotAngles.x;
				rotAngles.y = -rotAngles.y;
			}
			
			return Quaternion.Euler(rotAngles);
		}

		return Quaternion.identity;
	}

	/// <summary>
	/// Gets the tracked face rectangle of the specified user in color image coordinates, or zero-rect if the user's face is not tracked.
	/// </summary>
	/// <returns>The face rectangle, in color image coordinates.</returns>
	/// <param name="userId">User ID</param>
	public Rect GetFaceColorRect(long userId)
	{
		Rect faceColorRect = new Rect();
		sensorData.sensorInterface.GetFaceRect(userId, ref faceColorRect);

		return faceColorRect;
	}
	
	/// <summary>
	/// Determines whether there are valid anim units.
	/// </summary>
	/// <returns><c>true</c> if there are valid anim units; otherwise, <c>false</c>.</returns>
	public bool IsGotAU()
	{
		return bGotAU;
	}
	
	/// <summary>
	/// Gets the animation unit value at given index, or 0 if the index is invalid.
	/// </summary>
	/// <returns>The animation unit value.</returns>
	/// <param name="faceAnimKey">Face animation unit.</param>
	public float GetAnimUnit(KinectInterop.FaceShapeAnimations faceAnimKey)
	{
		if(dictAU.ContainsKey(faceAnimKey))
		{
			return dictAU[faceAnimKey];
		}
		
		return 0.0f;
	}
	
	/// <summary>
	/// Gets all animation units for the specified user.
	/// </summary>
	/// <returns><c>true</c>, if the user's face is tracked, <c>false</c> otherwise.</returns>
	/// <param name="userId">User ID</param>
	/// <param name="dictAnimUnits">Animation units dictionary, to get the results.</param>
	public bool GetUserAnimUnits(long userId, ref Dictionary<KinectInterop.FaceShapeAnimations, float> dictAnimUnits)
	{
		if (userId != 0 && userId == primaryUserID) 
		{
			dictAnimUnits = dictAU;
			return bGotAU;
		}

		if(sensorData != null && sensorData.sensorInterface != null)
		{
			bool bGotIt = sensorData.sensorInterface.GetAnimUnits(userId, ref dictAnimUnits);
			return bGotIt;
		}

		return false;
	}
	
	/// <summary>
	/// Determines whether there are valid shape units.
	/// </summary>
	/// <returns><c>true</c> if there are valid shape units; otherwise, <c>false</c>.</returns>
	public bool IsGotSU()
	{
		return bGotSU;
	}
	
	/// <summary>
	/// Gets the shape unit value at given index, or 0 if the index is invalid.
	/// </summary>
	/// <returns>The shape unit value.</returns>
	/// <param name="faceShapeKey">Face shape unit.</param>
	public float GetShapeUnit(KinectInterop.FaceShapeDeformations faceShapeKey)
	{
		if(dictSU.ContainsKey(faceShapeKey))
		{
			return dictSU[faceShapeKey];
		}
		
		return 0.0f;
	}
	
	/// <summary>
	/// Gets all animation units for the specified user.
	/// </summary>
	/// <returns><c>true</c>, if the user's face is tracked, <c>false</c> otherwise.</returns>
	/// <param name="userId">User ID</param>
	/// <param name="dictShapeUnits">Shape units dictionary, to get the results.</param>
	public bool GetUserShapeUnits(long userId, ref Dictionary<KinectInterop.FaceShapeDeformations, float> dictShapeUnits)
	{
		if (userId != 0 && userId == primaryUserID) 
		{
			dictShapeUnits = dictSU;
			return bGotSU;
		}

		if(sensorData != null && sensorData.sensorInterface != null)
		{
			bool bGotIt = sensorData.sensorInterface.GetShapeUnits(userId, ref dictShapeUnits);
			return bGotIt;
		}
		
		return false;
	}
	
	/// <summary>
	/// Gets the count of face model vertices.
	/// </summary>
	/// <returns>The count of face model vertices.</returns>
	public int GetFaceModelVertexCount()
	{
		if (avModelVertices != null) 
		{
			return avModelVertices.Length;
		} 

		return 0;
	}

	/// <summary>
	/// Gets the face model vertex, if a face model is available and the index is in range; Vector3.zero otherwise.
	/// </summary>
	/// <returns>The face model vertex.</returns>
	/// <param name="index">Vertex index, or Vector3.zero</param>
	public Vector3 GetFaceModelVertex(int index)
	{
		if (avModelVertices != null) 
		{
			if(index >= 0 && index < avModelVertices.Length)
			{
				return avModelVertices[index];
			}
		}
		
		return Vector3.zero;
	}
	
	/// <summary>
	/// Gets all face model vertices, if a face model is available; null otherwise.
	/// </summary>
	/// <returns>The face model vertices, or null.</returns>
	public Vector3[] GetFaceModelVertices()
	{
		return avModelVertices;
	}

	/// <summary>
	/// Gets the count of face model vertices for the specified user
	/// </summary>
	/// <returns>The count of face model vertices.</returns>
	/// <param name="userId">User ID</param>
	public int GetUserFaceVertexCount(long userId)
	{
		if (userId != 0 && userId == primaryUserID) 
		{
			return GetFaceModelVertexCount();
		}

		if(sensorData != null && sensorData.sensorInterface != null)
		{
			int iVertCount = sensorData.sensorInterface.GetFaceModelVerticesCount(userId);
			return iVertCount;
		}

		return 0;
	}

	/// <summary>
	/// Gets all face model vertices for the specified user.
	/// </summary>
	/// <returns><c>true</c>, if the user's face is tracked, <c>false</c> otherwise.</returns>
	/// <param name="userId">User ID</param>
	/// <param name="avVertices">Reference to array of vertices, to get the result.</param>
	public bool GetUserFaceVertices(long userId, ref Vector3[] avVertices)
	{
		if (userId != 0 && userId == primaryUserID) 
		{
			avVertices = GetFaceModelVertices();
			return (avModelVertices != null);
		}

		if(sensorData != null && sensorData.sensorInterface != null)
		{
			bool bGotIt = sensorData.sensorInterface.GetFaceModelVertices(userId, ref avVertices);
			return bGotIt;
		}
		
		return false;
	}
	
	/// <summary>
	/// Gets the count of face model triangles.
	/// </summary>
	/// <returns>The count of face model triangles.</returns>
	public int GetFaceModelTriangleCount()
	{
		if (avModelTriangles != null) 
		{
			return avModelTriangles.Length;
		}

		return 0;
	}

	/// <summary>
	/// Gets the face model triangle indices, if a face model is available; null otherwise.
	/// </summary>
	/// <returns>The face model triangle indices, or null.</returns>
	/// <param name="bMirroredModel">If set to <c>true</c> gets mirorred model indices.</param>
	public int[] GetFaceModelTriangleIndices(bool bMirroredModel)
	{
		if (avModelTriangles != null) 
		{
			return avModelTriangles;
		}

		return null;
	}

	/// <summary>
	/// Gets the face model UV-array, if it is available; null otherwise
	/// </summary>
	/// <returns>The face model UV-array, or null.</returns>
	public Vector2[] GetFaceModelUV()
	{
		if (bGotModelUV) 
		{
			return avModelUV;
		}

		return null;
	}

	/// <summary>
	/// Resets the face model UV-array. This is to request new UV-array estimation, when the 'Textured model mesh' is set to FaceRectangle.
	/// </summary>
	public void ResetFaceModelUV()
	{
		bGotModelUV = false;
	}


	//----------------------------------- end of public functions --------------------------------------//

	void Awake()
	{
		instance = this;
	}

	void Start() 
	{
		for (int i = 0; i < fixedUVs.Length; i++) {
			//fixedUVs [i] = new Vector2 ((float)hardCodedUVs[i*2], (float)hardCodedUVs[i*2 + 1]);
			//fixedUVs [i] = new Vector2 ((float)oldUVs[i*2], (float)oldUVs[i*2 + 1]);
			fixedUVs [i] = new Vector2 ((float)finalUVs[i*2], (float)finalUVs[i*2 + 1]);
			// oldUVS are "contiguous" at least, but I'll have to manipulate them individually and have to figure out how to visualize them to map the photos
		}

		try 
		{
			// get sensor data
			KinectManager kinectManager = KinectManager.Instance;
			if(kinectManager && kinectManager.IsInitialized())
			{
				sensorData = kinectManager.GetSensorData();
			}

			if(sensorData == null || sensorData.sensorInterface == null)
			{
				throw new Exception("Face tracking cannot be started, because KinectManager is missing or not initialized.");
			}

			if(debugText != null)
			{
				debugText.text = "Please, wait...";
			}
			
			// ensure the needed dlls are in place and face tracking is available for this interface
			bool bNeedRestart = false;
			if(sensorData.sensorInterface.IsFaceTrackingAvailable(ref bNeedRestart))
			{
				if(bNeedRestart)
				{
					KinectInterop.RestartLevel(gameObject, "FM");
					return;
				}
			}
			else
			{
				string sInterfaceName = sensorData.sensorInterface.GetType().Name;
				throw new Exception(sInterfaceName + ": Face tracking is not supported!");
			}

			// Initialize the face tracker
			wasFacetrackingActive = sensorData.sensorInterface.IsFaceTrackingActive();
			if(!wasFacetrackingActive)
			{
				if (!sensorData.sensorInterface.InitFaceTracking(getFaceModelData, displayFaceRect))
				{
					throw new Exception("Face tracking could not be initialized.");
				}
			}

			isFacetrackingInitialized = true;

			//DontDestroyOnLoad(gameObject);

			if(debugText != null)
			{
				debugText.text = "Ready.";
			}
		} 
		catch(DllNotFoundException ex)
		{
			Debug.LogError(ex.ToString());
			if(debugText != null)
				debugText.text = "Please check the Kinect and FT-Library installations.";
		}
		catch (Exception ex) 
		{
			Debug.LogError(ex.ToString());
			if(debugText != null)
				debugText.text = ex.Message;
		}
	}

	void OnDestroy()
	{
		if(isFacetrackingInitialized && !wasFacetrackingActive && sensorData != null && sensorData.sensorInterface != null)
		{
			// finish face tracking
			sensorData.sensorInterface.FinishFaceTracking();
		}

		if (faceMeshTexture != null) 
		{
			faceMeshTexture.Release();
			faceMeshTexture = null;
		}

//		// clean up
//		Resources.UnloadUnusedAssets();
//		GC.Collect();
		
		isFacetrackingInitialized = false;
		instance = null;
	}
	
	void Update() 
	{
		if (Input.GetKeyDown(KeyCode.RightArrow)){
			startNumber++;
			print (startNumber.ToString());
		}
		if (Input.GetKeyDown(KeyCode.LeftArrow)){
			startNumber--;
			print (startNumber.ToString());
		}
		if(isFacetrackingInitialized)
		{
			KinectManager kinectManager = KinectManager.Instance;
			if(kinectManager && kinectManager.IsInitialized())
			{
				lastUserID = primaryUserID;
				primaryUserID = kinectManager.GetUserIdByIndex(playerIndex);

				if (primaryUserID != lastUserID && primaryUserID != 0) 
				{
					//faceMeshGotOnce = false;
				}
			}

			// update the face tracker
			isTrackingFace = false;

			bool bFacetrackingUpdated = !wasFacetrackingActive ? sensorData.sensorInterface.UpdateFaceTracking() : true;
			if(bFacetrackingUpdated)
			{
				// estimate the tracking state
				isTrackingFace = sensorData.sensorInterface.IsFaceTracked(primaryUserID);

				if(!isTrackingFace && (Time.realtimeSinceStartup - lastFaceTrackedTime) <= faceTrackingTolerance)
				{
					// allow tolerance in tracking
					isTrackingFace = true;
				}

				// get the facetracking parameters
				if(isTrackingFace)
				{
					lastFaceTrackedTime = Time.realtimeSinceStartup;
					facePosUpdateTime = Time.time;
					
					// get face rectangle
					/**bGotFaceRect =*/ sensorData.sensorInterface.GetFaceRect(primaryUserID, ref faceRect);
					
					// get head position
					bGotHeadPos = sensorData.sensorInterface.GetHeadPosition(primaryUserID, ref headPos);

					// get head rotation
					bGotHeadRot = sensorData.sensorInterface.GetHeadRotation(primaryUserID, ref headRot);

					// get the animation units
					bGotAU = sensorData.sensorInterface.GetAnimUnits(primaryUserID, ref dictAU);

					// get the shape units
					bGotSU = sensorData.sensorInterface.GetShapeUnits(primaryUserID, ref dictSU);

					//if(faceModelMesh != null && faceModelMesh.activeInHierarchy)
					{
						// apply model vertices to the mesh
						if(!bFaceModelMeshInited)
						{
							bFaceModelMeshInited = CreateFaceModelMesh();
						}
					}
					
					if (getFaceModelData && bFaceModelMeshInited && primaryUserID != 0) 
					{
						if (!pauseModelMeshUpdates && !updateFaceMeshStarted)
						{
							StartCoroutine(UpdateFaceModelMesh());
						}
					} 
				}
			}

//			// set mesh activity flag
//			bool bFaceMeshActive = isTrackingFace && primaryUserID != 0;
//			if(faceModelMesh != null && bFaceModelMeshInited && faceModelMesh.activeSelf != bFaceMeshActive)
//			{
//				faceModelMesh.SetActive(bFaceMeshActive);
//			}
		}
	}
	
	void OnGUI()
	{
		if(isFacetrackingInitialized)
		{
			if(debugText != null)
			{
				if(isTrackingFace)
				{
					debugText.text = "BodyID: " + primaryUserID;
				}
				else
				{
					debugText.text = "Not tracking...";
				}
			}
		}
	}


	protected bool CreateFaceModelMesh()
	{
//		if(faceModelMesh == null)
//			return false;

		if (avModelVertices == null /**&& !bGotModelVerticesFromDC*/) 
		{
			int iNumVertices = sensorData.sensorInterface.GetFaceModelVerticesCount(0);
			if(iNumVertices <= 0)
				return false;

			avModelVertices = new Vector3[iNumVertices];
			bGotModelVertices = sensorData.sensorInterface.GetFaceModelVertices(0, ref avModelVertices);

			avModelUV = new Vector2[iNumVertices];
			bGotModelUV = false;

			if(!bGotModelVertices)
				return false;
		}

		// estimate face mesh vertices with respect to the head joint
		Vector3[] vMeshVertices = new Vector3[avModelVertices.Length];

		//if (!bGotModelVerticesFromDC) 
		{
			Vector3 vFaceCenter = Vector3.zero;
			for (int i = 0; i < avModelVertices.Length; i++) 
			{
				vFaceCenter += avModelVertices[i];
			}

			vFaceCenter /= (float)avModelVertices.Length;

			faceHeadOffset = Vector3.zero;
			if (vFaceCenter.sqrMagnitude >= 1f) 
			{
				Vector3 vHeadToFace = (vFaceCenter - headPos);

				faceHeadOffset = Quaternion.Inverse(headRot) * vHeadToFace;
				faceHeadOffset.y += verticalMeshOffset;
			}

			vFaceCenter -= headRot * faceHeadOffset;

			for(int i = 0; i < avModelVertices.Length; i++)
			{
				//avModelVertices[i] = kinectToWorld.MultiplyPoint3x4(avModelVertices[i]) - headPosWorld;
				//avModelVertices[i] -= vFaceCenter;

				vMeshVertices[i] = avModelVertices[i] - vFaceCenter;
			}
		}

		if (avModelTriangles == null && !bGotModelTrianglesFromDC) 
		{
			int iNumTriangles = sensorData.sensorInterface.GetFaceModelTrianglesCount();
			if(iNumTriangles <= 0)
				return false;

			avModelTriangles = new int[iNumTriangles];
			bGotModelTriangles = sensorData.sensorInterface.GetFaceModelTriangles(mirroredModelMesh, ref avModelTriangles);

			if(!bGotModelTriangles)
				return false;
		}

		if (!faceMeshMaterial && faceModelMesh) 
		{
			faceMeshMaterial = faceModelMesh.GetComponent<MeshRenderer>().material;

			if (faceMeshMaterial && faceMeshMaterial.mainTexture) 
			{
				faceMeshMaterial.mainTexture.wrapMode = TextureWrapMode.Clamp;  // TextureWrapMode.Repeat; // 
			}
		}

		if (faceModelMesh) 
		{
			Mesh mesh = new Mesh();
			mesh.name = "FaceMesh";
			faceModelMesh.GetComponent<MeshFilter>().mesh = mesh;

			mesh.vertices = vMeshVertices; // avModelVertices;
			//mesh.uv = avModelUV;

			mesh.triangles = avModelTriangles;
			mesh.RecalculateNormals();

//			if (moveModelMesh) 
//			{
//				faceModelMesh.transform.position = headPos;
//				//faceModelMesh.transform.rotation = faceModelRot;
//			}

			SetFaceModelMeshTexture();
		}

		//bFaceModelMeshInited = true;
		return true;
	}

	// sets the proper face mesh texture
	protected void SetFaceModelMeshTexture()
	{
		if (texturedModelMesh == TextureType.ColorMap) 
		{
			KinectManager kinectManager = KinectManager.Instance;
			Texture texColorMap = kinectManager ? kinectManager.GetUsersClrTex() : null;

			if (!faceMeshTexture && kinectManager && texColorMap) 
			{
				faceMeshTexture = new RenderTexture (texColorMap.width, texColorMap.height, 0);
				faceMeshMaterial.mainTexture = faceMeshTexture;  // kinectManager.GetUsersClrTex();
			}

			if (faceMeshTexture && texColorMap) 
			{
				// update the color texture
				Graphics.Blit(texColorMap, faceMeshTexture);
			}
		}
		else if (texturedModelMesh == TextureType.FaceRectangle) 
		{
//			if (faceMeshTexture != null) 
//			{
//				faceMeshTexture.Release();
//				faceMeshTexture = null;
//			}
		}
		else if(texturedModelMesh == TextureType.None)
		{
			if (faceMeshMaterial.mainTexture != null) 
			{
				faceMeshMaterial.mainTexture = null;
			}

			if (faceMeshTexture != null) 
			{
				faceMeshTexture.Release();
				faceMeshTexture = null;
			}
		}
	}


	protected IEnumerator UpdateFaceModelMesh()
	{
		updateFaceMeshStarted = true;

		//if (!dontUpdateModelMesh || !faceMeshGotOnce /**&& !bGotModelVerticesFromDC*/) 
		{
			// init the vertices array if needed
			if(avModelVertices == null)
			{
				int iNumVertices = sensorData.sensorInterface.GetFaceModelVerticesCount(primaryUserID);
				avModelVertices = new Vector3[iNumVertices];
			}

			// get face model vertices
			bGotModelVertices = sensorData.sensorInterface.GetFaceModelVertices(primaryUserID, ref avModelVertices);
		}

		if(bGotModelVertices && faceModelMesh != null)
		{
			//Quaternion faceModelRot = faceModelMesh.transform.rotation;
			//faceModelMesh.transform.rotation = Quaternion.identity;

			bool bFaceMeshUpdated = false;
			//if (!dontUpdateModelMesh || !faceMeshGotOnce) 
			{
				AsyncTask<bool> task = new AsyncTask<bool>(() => {
					// estimate face mesh vertices with respect to the head joint
					vMeshVertices = null;

					KinectManager kinectManager = KinectManager.Instance;
					Matrix4x4 kinectToWorld = kinectManager ? kinectManager.GetKinectToWorldMatrix() : Matrix4x4.identity;
					Vector3 headPosWorld = kinectToWorld.MultiplyPoint3x4(headPos);
						
					Vector3 lastNosePos = nosePos;
					//if (!bGotModelVerticesFromDC) 
					{
//						Vector3 vFaceCenter = Vector3.zero;
//						for (int i = 0; i < avModelVertices.Length; i++) 
//						{
//							vFaceCenter += avModelVertices[i];
//						}
//
//						vFaceCenter /= (float)avModelVertices.Length;
//
//						Vector3 vHeadToFace = (vFaceCenter - headPos);
//						if (vHeadToFace.sqrMagnitude < 0.015f) // max 0.12 x 0.12
//						{
//							faceHeadOffset = Quaternion.Inverse(headRot) * vHeadToFace;
//							faceHeadOffset.y += verticalMeshOffset;
//						}

						nosePos = GetFaceModelNosePos();
						Vector3 vHeadToNose = Quaternion.Inverse(headRot) * (nosePos - headPos);
						float headToNoseLen = vHeadToNose.magnitude;

//						string sHeadToNose = string.Format("({0:F2}, {0:F2}, {0:F2})", vHeadToNose.x, vHeadToNose.y, vHeadToNose.z);
//						Debug.Log("U-Face nosePos: " + nosePos + ", headPos: " + headPos + "\noffset: " + sHeadToNose + ", len: " + headToNoseLen);

						if(headToNoseLen >= 0.08f && headToNoseLen <= 0.18f)
						{
							//vFaceCenter -= headRot * faceHeadOffset;

							vMeshVertices = new Vector3[avModelVertices.Length];
							for(int i = 0; i < avModelVertices.Length; i++)
							{
								//avModelVertices[i] = kinectToWorld.MultiplyPoint3x4(avModelVertices[i]) - headPosWorld;
								//avModelVertices[i] -= vFaceCenter;

								//vMeshVertices[i] = avModelVertices[i] - vFaceCenter;
								vMeshVertices[i] = kinectToWorld.MultiplyPoint3x4(avModelVertices[i]) - headPosWorld; // avModelVertices[i] - headPos;
							}
						}	
					}

					if(vMeshVertices == null || lastNosePos == nosePos)
					{
						return false;
					}

					//if (!bGotModelVerticesFromDC) 
					{
						if(texturedModelMesh != TextureType.None)
						{
							float colorWidth = (float)kinectManager.GetColorImageWidth();
							float colorHeight = (float)kinectManager.GetColorImageHeight();

							//bool bGotFaceRect = sensorData.sensorInterface.GetFaceRect(userId, ref faceRect);
							bool faceRectValid = /**bGotFaceRect &&*/ faceRect.width > 0 && faceRect.height > 0;
							int lastValidUVIndex = -1;  // new code by Andrew Stern

							for(int i = 0; i < avModelVertices.Length; i++)
							{
								Vector2 posDepth = Vector2.zero;
								if(texturedModelMesh == TextureType.ColorMap || !bGotModelUV)
								{
									posDepth = kinectManager.MapSpacePointToDepthCoords(avModelVertices[i]);
								}

								bool bUvSet = false;
								if(posDepth != Vector2.zero)
								{
									ushort depth = kinectManager.GetDepthForPixel((int)posDepth.x, (int)posDepth.y);
									Vector2 posColor = kinectManager.MapDepthPointToColorCoords(posDepth, depth);

									if(posColor != Vector2.zero && !float.IsInfinity(posColor.x) && !float.IsInfinity(posColor.y))
									{
										if(texturedModelMesh == TextureType.ColorMap)
										{
											avModelUV[i] = new Vector2(posColor.x / colorWidth, posColor.y / colorHeight);
											lastValidUVIndex = i;   // new code by Andrew Stern
											bUvSet = true;
										}
										else if(texturedModelMesh == TextureType.FaceRectangle && faceRectValid)
										{
											if(!bGotModelUV)
											{
												avModelUV[i] = new Vector2(/**Mathf.Clamp01*/((posColor.x - faceRect.x) / faceRect.width), 
													/**Mathf.Clamp01*/(1f - (posColor.y - faceRect.y) / faceRect.height));
												lastValidUVIndex = i;   // new code by Andrew Stern
											}

											bUvSet = true;
										}
									}
								}

								if(texturedModelMesh == TextureType.ColorMap && !bUvSet)
								{
									if (lastValidUVIndex >= 0) // new code by Andrew Stern
									{
										avModelUV[i] = new Vector2(avModelUV[lastValidUVIndex].x, avModelUV[lastValidUVIndex].y);
									}
									else
									{
										// original code
										avModelUV[i] = Vector2.zero;
									}
								}
							}

							if(lastValidUVIndex >= 0)  // check for valid run
								bGotModelUV = true;
						}
					}

					return true;
				});

				task.Start();

				while (task.State == AsyncTaskState.Running)
				{
					yield return null;
				}

//				// show nose & head positions
//				Matrix4x4 kinectToWorld2 = KinectManager.Instance.GetKinectToWorldMatrix();
//				if (noseTransform)
//					noseTransform.position = kinectToWorld2.MultiplyPoint3x4(nosePos);
//				if(headTransform)
//					headTransform.position = kinectToWorld2.MultiplyPoint3x4(headPos);
//
//				Vector3 vHeadToNose2 = Quaternion.Inverse(headRot) * (nosePos - headPos);
//				string sHeadToNose2 = string.Format("({0:F2}, {0:F2}, {0:F2})", vHeadToNose2.x, vHeadToNose2.y, vHeadToNose2.z);
//				if(debugText2)
//					debugText2.text = "h2n: " + sHeadToNose2 + ", len: " + vHeadToNose2.magnitude;

				bFaceMeshUpdated = task.Result;
				if(bFaceMeshUpdated) 
				{
					Mesh mesh = faceModelMesh.GetComponent<MeshFilter>().mesh;
					mesh.vertices = vMeshVertices; // avModelVertices;
					vMeshVertices = null;

					if(texturedModelMesh != TextureType.None && avModelUV != null)
					{
						// Comment this block if you want to keep the original set of face UVs
						//if (!showRebecca)
						//  mesh.uv = avModelUV;
						//else
						//  mesh.uv = fixedUVs;

						// NEW!
						// pregen UVs are 1443 in length, while avModelUV is 1347. Not sure how that happened :-(
						//Vector2[] destArray = new Vector2[1347];
						//Array.Copy(pregenFace.uv, startNumber, destArray, 0, 1347);
						//mesh.uv = destArray;
						//print (mesh.uv.Length.ToString () + ", " + pregenFace.uv.Length.ToString () + ", " + avModelUV.Length.ToString());

					}

					faceMeshUpdateTime = Time.time;
					//faceMeshGotOnce = true;

					mesh.RecalculateNormals();
					mesh.RecalculateBounds();

					// set the face mesh texture
					if (!showRebecca)
					  SetFaceModelMeshTexture();
					else
					  faceMeshMaterial.mainTexture = faceImages[0];
				}
			}

			if (moveModelMesh) 
			{
				KinectManager kinectManager = KinectManager.Instance;
				Matrix4x4 kinectToWorld = kinectManager ? kinectManager.GetKinectToWorldMatrix() : Matrix4x4.identity;
				Vector3 newHeadPos = kinectToWorld.MultiplyPoint3x4(headPos);

				// check for head pos overlay
				if(foregroundCamera)
				{
					// get the background rectangle (use the portrait background, if available)
					Rect backgroundRect = foregroundCamera.pixelRect;
					PortraitBackground portraitBack = PortraitBackground.Instance;

					if(portraitBack && portraitBack.enabled)
					{
						backgroundRect = portraitBack.GetBackgroundRect();
					}

					if(kinectManager)
					{
						Vector3 posColorOverlay = kinectManager.GetJointPosColorOverlay(primaryUserID, (int)KinectInterop.JointType.Head, foregroundCamera, backgroundRect);

						if(posColorOverlay != Vector3.zero)
						{
							newHeadPos = posColorOverlay;
						}
					}
				}
				// flip X for projection. Just inverting the cam's projection matrix won't do it - it's used to calculate the head position
				newHeadPos = new Vector3(-newHeadPos.x, newHeadPos.y, newHeadPos.z);
				faceModelMesh.transform.position = newHeadPos; // Vector3.Lerp(faceModelMesh.transform.position, newHeadPos, 20f * Time.deltaTime);
				//faceModelMesh.transform.rotation = faceModelRot;
			}

			// don't rotate the transform - mesh follows the head rotation
			if (faceModelMesh.transform.rotation != Quaternion.identity) 
			{
				faceModelMesh.transform.rotation = Quaternion.identity;
			}

			// apply scale factor
			if(faceModelMesh.transform.localScale.x != modelMeshScale)
			{
				faceModelMesh.transform.localScale = new Vector3(modelMeshScale, modelMeshScale, modelMeshScale);
			}

			if(!faceModelMesh.activeSelf)
			{
				faceModelMesh.SetActive(true);
			}
		}
		else
		{
			if(faceModelMesh && faceModelMesh.activeSelf)
			{
				faceModelMesh.SetActive(false);
			}
		}

		updateFaceMeshStarted = false;
	}

	// returns the nose tip position, or Vector3.zero if not found
	private Vector3 GetFaceModelNosePos()
	{
		if (avModelVertices != null) 
		{
			int iNoseIndex = -1;
			if (sensorData.sensorIntPlatform == KinectInterop.DepthSensorPlatform.KinectSDKv2 ||
			    sensorData.sensorIntPlatform == KinectInterop.DepthSensorPlatform.KinectUWPv2 ||
			    sensorData.sensorIntPlatform == KinectInterop.DepthSensorPlatform.DummyK2) 
			{
				iNoseIndex = 18; // Microsoft.Kinect.Face.HighDetailFacePoints.NoseTip
			} 
			else if (sensorData.sensorIntPlatform == KinectInterop.DepthSensorPlatform.KinectSDKv1 ||
			        sensorData.sensorIntPlatform == KinectInterop.DepthSensorPlatform.DummyK1) 
			{
				iNoseIndex = 89; // 
			}

			if (iNoseIndex >= 0 && iNoseIndex < avModelVertices.Length) 
			{
				return avModelVertices[iNoseIndex];
			}
		}

		return Vector3.zero;
	}

	// gets face basic parameters as csv line
	public string GetFaceParamsAsCsv(char delimiter)
	{
		// create the output string
		StringBuilder sbBuf = new StringBuilder();
		//const char delimiter = ',';

		if (bGotHeadPos || bGotHeadRot)
		{
			sbBuf.Append("fp").Append(delimiter);

			// head pos
			sbBuf.Append (bGotHeadPos ? "1" : "0").Append(delimiter);

			if (bGotHeadPos) 
			{
				sbBuf.AppendFormat ("{0:F3}", headPos.x).Append (delimiter);
				sbBuf.AppendFormat ("{0:F3}", headPos.y).Append (delimiter);
				sbBuf.AppendFormat ("{0:F3}", headPos.z).Append (delimiter);
			}

			// head rot
			sbBuf.Append (bGotHeadRot ? "1" : "0").Append(delimiter);
			Vector3 vheadRot = headRot.eulerAngles;

			if (bGotHeadRot) 
			{
				sbBuf.AppendFormat ("{0:F3}", vheadRot.x).Append (delimiter);
				sbBuf.AppendFormat ("{0:F3}", vheadRot.y).Append (delimiter);
				sbBuf.AppendFormat ("{0:F3}", vheadRot.z).Append (delimiter);
			}

			// face rect
			sbBuf.Append ("1").Append(delimiter);  
			sbBuf.AppendFormat ("{0:F0}", faceRect.x).Append (delimiter);
			sbBuf.AppendFormat ("{0:F0}", faceRect.y).Append (delimiter);
			sbBuf.AppendFormat ("{0:F0}", faceRect.width).Append (delimiter);
			sbBuf.AppendFormat ("{0:F0}", faceRect.height).Append (delimiter);

			// animation units
			sbBuf.Append (bGotAU ? "1" : "0").Append(delimiter);

			if (bGotAU) 
			{
				int enumCount = Enum.GetNames (typeof(KinectInterop.FaceShapeAnimations)).Length;
				sbBuf.Append (enumCount).Append(delimiter);

				for (int i = 0; i < enumCount; i++) 
				{
					float dictValue = dictAU [(KinectInterop.FaceShapeAnimations)i];
					sbBuf.AppendFormat ("{0:F3}", dictValue).Append (delimiter);
				}
			}

			// shape units
			sbBuf.Append("0");  // don't send SUs, to save space
//			sbBuf.Append (bGotSU ? "1" : "0").Append(delimiter);
//
//			if (bGotSU) 
//			{
//				int enumCount = Enum.GetNames (typeof(KinectInterop.FaceShapeDeformations)).Length;
//				sbBuf.Append (enumCount).Append(delimiter);
//
//				for (int i = 0; i < enumCount; i++) 
//				{
//					float dictValue = dictSU [(KinectInterop.FaceShapeDeformations)i];
//					sbBuf.AppendFormat ("{0:F3}", dictValue).Append (delimiter);
//				}
//			}

			// any other parameters...
		}

		// remove the last delimiter
		if(sbBuf.Length > 0 && sbBuf[sbBuf.Length - 1] == delimiter)
		{
			sbBuf.Remove(sbBuf.Length - 1, 1);
		}

		return sbBuf.ToString();
	}

	// sets basic face parameters from a csv line
	public bool SetFaceParamsFromCsv(string sCsvLine, char[] delimiters)
	{
		if(sCsvLine.Length == 0)
			return false;

		// split the csv line in parts
		//char[] delimiters = { ',' };
		string[] alCsvParts = sCsvLine.Split(delimiters);

		if(alCsvParts.Length < 1 || alCsvParts[0] != "fp")
			return false;

		int iIndex = 1;
		int iLength = alCsvParts.Length;

		if (iLength < (iIndex + 1))
			return false;

		// head pos
		bGotHeadPos = (alCsvParts[iIndex] == "1");
		iIndex++;

		if (bGotHeadPos && iLength >= (iIndex + 3)) 
		{
			float x = 0f, y = 0f, z = 0f;

			float.TryParse(alCsvParts[iIndex], out x);
			float.TryParse(alCsvParts[iIndex + 1], out y);
			float.TryParse(alCsvParts[iIndex + 2], out z);
			iIndex += 3;

			headPos = new Vector3(x, y, z);
		}

		// head rot
		bGotHeadRot = (alCsvParts[iIndex] == "1");
		iIndex++;

		if (bGotHeadRot && iLength >= (iIndex + 3)) 
		{
			float x = 0f, y = 0f, z = 0f;

			float.TryParse(alCsvParts[iIndex], out x);
			float.TryParse(alCsvParts[iIndex + 1], out y);
			float.TryParse(alCsvParts[iIndex + 2], out z);
			iIndex += 3;

			headRot = Quaternion.Euler(x, y, z);
		}

		// face rect
		bool bGotFaceRect = (alCsvParts[iIndex] == "1");
		iIndex++;

		if (bGotFaceRect && iLength >= (iIndex + 4)) 
		{
			float x = 0f, y = 0f, w = 0f, h = 0f;

			float.TryParse(alCsvParts[iIndex], out x);
			float.TryParse(alCsvParts[iIndex + 1], out y);
			float.TryParse(alCsvParts[iIndex + 2], out w);
			float.TryParse(alCsvParts[iIndex + 3], out h);
			iIndex += 4;

			faceRect.x = x; faceRect.y = y;
			faceRect.width = w; faceRect.height = h;
		}

		// animation units
		bGotAU = (alCsvParts[iIndex] == "1");
		iIndex++;

		if (bGotAU && iLength >= (iIndex + 1)) 
		{
			int count = 0;
			int.TryParse(alCsvParts[iIndex], out count);
			iIndex++;

			for (int i = 0; i < count && iLength >= (iIndex + 1); i++) 
			{
				float v = 0;
				float.TryParse(alCsvParts[iIndex], out v);
				iIndex++;

				dictAU [(KinectInterop.FaceShapeAnimations)i] = v;
			}
		}

		// shape units
		bGotSU = (alCsvParts[iIndex] == "1");
		iIndex++;

		if (bGotSU && iLength >= (iIndex + 1)) 
		{
			int count = 0;
			int.TryParse(alCsvParts[iIndex], out count);
			iIndex++;

			for (int i = 0; i < count && iLength >= (iIndex + 1); i++) 
			{
				float v = 0;
				float.TryParse(alCsvParts[iIndex], out v);
				iIndex++;

				dictSU [(KinectInterop.FaceShapeDeformations)i] = v;
			}
		}

		// any other parameters here...

		// emulate face tracking
		lastFaceTrackedTime = Time.realtimeSinceStartup;
		facePosUpdateTime = Time.time;

		return true;
	}

	// gets face model vertices as csv line
	public string GetFaceVerticesAsCsv()
	{
		// create the output string
		StringBuilder sbBuf = new StringBuilder();
		const char delimiter = ',';

		if (bGotModelVertices && avModelVertices != null)
		{
			sbBuf.Append("fv").Append(delimiter);

			// model vertices
			int vertCount = avModelVertices.Length;
			sbBuf.Append (vertCount).Append(delimiter);

			for (int i = 0; i < vertCount; i++) 
			{
				sbBuf.AppendFormat ("{0:F3}", avModelVertices[i].x).Append (delimiter);
				sbBuf.AppendFormat ("{0:F3}", avModelVertices[i].y).Append (delimiter);
				sbBuf.AppendFormat ("{0:F3}", avModelVertices[i].z).Append (delimiter);
			}
		}

		// remove the last delimiter
		if(sbBuf.Length > 0 && sbBuf[sbBuf.Length - 1] == delimiter)
		{
			sbBuf.Remove(sbBuf.Length - 1, 1);
		}

		return sbBuf.ToString();
	}

	// sets face model vertices from a csv line
	public bool SetFaceVerticesFromCsv(string sCsvLine)
	{
		if(sCsvLine.Length == 0)
			return false;

		// split the csv line in parts
		char[] delimiters = { ',' };
		string[] alCsvParts = sCsvLine.Split(delimiters);

		if(alCsvParts.Length < 1 || alCsvParts[0] != "fv")
			return false;

		int iIndex = 1;
		int iLength = alCsvParts.Length;

		if (iLength < (iIndex + 1))
			return false;

		// model vertices
		int vertCount = 0;
		int.TryParse(alCsvParts[iIndex], out vertCount);
		iIndex++;

		if (vertCount > 0) 
		{
			if (avModelVertices == null || avModelVertices.Length != vertCount) 
			{
				avModelVertices = new Vector3[vertCount];
			}

			for (int i = 0; i < vertCount && iLength >= (iIndex + 3); i++) 
			{
				float x = 0f, y = 0f, z = 0f;

				float.TryParse(alCsvParts[iIndex], out x);
				float.TryParse(alCsvParts[iIndex + 1], out y);
				float.TryParse(alCsvParts[iIndex + 2], out z);
				iIndex += 3;

				avModelVertices[i] = new Vector3(x, y, z);
			}

			bGotModelVertices = true;
			//bGotModelVerticesFromDC = true;
		}

		faceMeshUpdateTime = Time.time;

		return true;
	}

	// gets face model UVs as csv line
	public string GetFaceUvsAsCsv()
	{
		// create the output string
		StringBuilder sbBuf = new StringBuilder();
		const char delimiter = ',';

		if (bGotModelVertices && avModelUV != null)
		{
			sbBuf.Append("fu").Append(delimiter);

			// face rect width & height
			sbBuf.AppendFormat ("{0:F0}", faceRect.width).Append (delimiter);
			sbBuf.AppendFormat ("{0:F0}", faceRect.height).Append (delimiter);

			// model UVs
			int uvCount = avModelUV.Length;
			sbBuf.Append (uvCount).Append(delimiter);

			for (int i = 0; i < uvCount; i++) 
			{
				sbBuf.AppendFormat ("{0:F3}", avModelUV[i].x).Append (delimiter);
				sbBuf.AppendFormat ("{0:F3}", avModelUV[i].y).Append (delimiter);
			}
		}

		// remove the last delimiter
		if(sbBuf.Length > 0 && sbBuf[sbBuf.Length - 1] == delimiter)
		{
			sbBuf.Remove(sbBuf.Length - 1, 1);
		}

		return sbBuf.ToString();
	}

	// sets face model UVs from a csv line
	public bool SetFaceUvsFromCsv(string sCsvLine)
	{
		if(sCsvLine.Length == 0)
			return false;

		// split the csv line in parts
		char[] delimiters = { ',' };
		string[] alCsvParts = sCsvLine.Split(delimiters);

		if(alCsvParts.Length < 1 || alCsvParts[0] != "fu")
			return false;

		int iIndex = 1;
		int iLength = alCsvParts.Length;

		if (iLength < (iIndex + 2))
			return false;

		// face width & height
		float w = 0f, h = 0f;

		float.TryParse(alCsvParts[iIndex], out w);
		float.TryParse(alCsvParts[iIndex + 1], out h);
		iIndex += 2;

		faceRect.width = w; faceRect.height = h;

		// model UVs
		int uvCount = 0;
		if (iLength >= (iIndex + 1)) 
		{
			int.TryParse(alCsvParts[iIndex], out uvCount);
			iIndex++;
		}

		if (uvCount > 0) 
		{
			if (avModelUV == null || avModelUV.Length != uvCount) 
			{
				avModelUV = new Vector2[uvCount];
			}

			for (int i = 0; i < uvCount && iLength >= (iIndex + 2); i++) 
			{
				float x = 0f, y = 0f;

				float.TryParse(alCsvParts[iIndex], out x);
				float.TryParse(alCsvParts[iIndex + 1], out y);
				iIndex += 2;

				avModelUV[i] = new Vector2(x, y);
			}

			bGotModelUV = true;
		}

		return true;
	}

	// gets face model triangles as csv line
	public string GetFaceTrianglesAsCsv()
	{
		// create the output string
		StringBuilder sbBuf = new StringBuilder();
		const char delimiter = ',';

		if (avModelTriangles != null)
		{
			sbBuf.Append("ft").Append(delimiter);

			// model triangles
			int triCount = avModelTriangles.Length;
			sbBuf.Append (triCount).Append(delimiter);

			for (int i = 0; i < triCount; i++) 
			{
				sbBuf.Append(avModelTriangles[i]).Append (delimiter);
			}
		}

		// remove the last delimiter
		if(sbBuf.Length > 0 && sbBuf[sbBuf.Length - 1] == delimiter)
		{
			sbBuf.Remove(sbBuf.Length - 1, 1);
		}

		return sbBuf.ToString();
	}

	// sets face model model from a csv line
	public bool SetFaceTrianglesFromCsv(string sCsvLine)
	{
		if(sCsvLine.Length == 0)
			return false;

		// split the csv line in parts
		char[] delimiters = { ',' };
		string[] alCsvParts = sCsvLine.Split(delimiters);

		if(alCsvParts.Length < 1 || alCsvParts[0] != "ft")
			return false;

		int iIndex = 1;
		int iLength = alCsvParts.Length;

		if (iLength < (iIndex + 1))
			return false;

		// model triangles
		int triCount = 0;
		int.TryParse(alCsvParts[iIndex], out triCount);
		iIndex++;

		if (triCount > 0) 
		{
			if (avModelTriangles == null || avModelTriangles.Length != triCount) 
			{
				avModelTriangles = new int[triCount];
			}

			for (int i = 0; i < triCount && iLength >= (iIndex + 1); i++) 
			{
				int v = 0;

				int.TryParse(alCsvParts[iIndex], out v);
				iIndex++;

				avModelTriangles[i] = v;
			}

			bGotModelTriangles = true;
			bGotModelTrianglesFromDC = true;
		}

		return true;
	}

	void LateUpdate(){
		//if (Input.GetKeyDown (KeyCode.Q)) {
		//	ObjExporter.MeshToFile (GetFaceModelVertices(), GetFaceModelUV(), GetFaceModelTriangleIndices(false), Application.persistentDataPath + "/derp.obj");
		//	print ("Saved to: " + Application.persistentDataPath + "/derp.obj");
		//	print("Verts:");
		//	print (GetFaceModelVertices().Length);
		//	print ("UVs");
		//	print (GetFaceModelUV ().Length);
		//	print ("indices");
		//	print (GetFaceModelTriangleIndices (false).Length);

		//}
		if (Input.GetKeyDown (KeyCode.Q)) {
			showRebecca = !showRebecca;
		}

	}



}
